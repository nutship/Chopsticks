{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"home"},{"location":"_basis/","text":"","title":"Preface"},{"location":"_basis/primitive_type/","text":"1. \u81ea\u52a8\u88c5\u7bb1 \u23f3 Java \u4fdd\u7559\u4e86 8 \u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u7ee7\u627f\u81ea Object \u7684\u5bf9\u8c61\uff0c\u56e0\u800c\u9700\u8981\u5305\u88c5\u7c7b primitive types : byte char short int float double long boolean wrapper classes : Byte Character Short Integer Float Double Long Boolean trasform : new WrapperClass ( primitive ) <--> WrapperInstance . valueOf () \u4f46\u624b\u52a8\u8f6c\u6362\u4f7f\u5f97\u4ee3\u7801\u7e41\u7410\uff0c\u56e0\u6b64 Java1.5 \u5f15\u5165\u4e86\u81ea\u52a8\u88c5\u7bb1 (autoboxing) \u548c\u81ea\u52a8\u62c6\u7bb1\u7684\u8bed\u6cd5\u7cd6 \u88c5\u7bb1\u65f6\u7f16\u8bd1\u5668\u8c03\u7528\u7c7b\u4f3c valueOf() \u5c06\u539f\u59cb\u7c7b\u578b\u8f6c\u6362\u4e3a\u5bf9\u8c61\uff0c\u62c6\u7bb1\u65f6\u901a\u8fc7\u7c7b\u4f3c intValue() \u7684\u65b9\u6cd5 \u81ea\u52a8\u88c5\u7bb1\u548c\u62c6\u7bb1\u53ef\u80fd\u53d1\u751f\u4e8e\u8d4b\u503c\u65f6\u3001\u65b9\u6cd5\u8c03\u7528\u65f6 // 1. assignment Integer iObj = 3 ; // autoboxing int iPri = iObj ; // autounboxing // 2. call method showInteger ( 3 ); \u81ea\u52a8\u88c5\u7bb1\u673a\u5236\u53ef\u80fd\u4f1a\u521b\u5efa\u65e0\u7528\u5bf9\u8c61\uff0c\u52a0\u91cd\u5783\u573e\u56de\u6536\u7684\u538b\u529b Integer sum = 0 ; for ( int i = 0 ; i < 5000 ; ++ i ) sum += i ; sum += i \u7ecf\u8fc7\u7f16\u8bd1\u5668\u8f6c\u6362\u540e\u53ef\u80fd\u4e3a int result = sum . intValue () + 1 ; Integer sum = new Integer ( result ); \u8fd8\u9700\u8981\u6ce8\u610f: int \u548c Integer \u5728\u91cd\u8f7d\u65f6\u5c5e\u4e8e\u4e0d\u540c\u7c7b\u522b\uff0c\u56e0\u6b64\u8c03\u7528\u91cd\u8f7d\u51fd\u6570\u65e0\u9700\u62c5\u5fc3\u53d1\u751f\u81ea\u52a8\u88c5\u7bb1\u3002 Integer \u672a\u521d\u59cb\u5316\u5219\u503c\u4e3a null \uff0c\u6b64\u65f6\u81ea\u52a8\u62c6\u7bb1 (\u4f8b\u5982 i < 0 ) \u4f1a\u629b\u51fa\u5f02\u5e38 2. \u81ea\u52a8\u88c5\u7bb1\u4e0e == \u23f3 \u5305\u88c5\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u4e0e\u57fa\u672c\u7c7b\u578b\u6bd4\u8f83\uff0c\u76f8\u5f53\u4e8e\u62ff\u51fa\u5305\u88c5\u7c7b\u578b\u7684\u6570\u503c instance.xxValue() == primitive Integer n1 = 1 ; int n2 = 1 ; System . out . println ( n1 == n2 ); // true Integer.valueOf() \u4f1a\u7f13\u5b58 -128-127 \u8303\u56f4\u7684 Integer \u5bf9\u8c61\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u81ea\u52a8\u88c5\u7bb1\u4e86\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u67d0\u4e2a\u503c\uff0c\u8fd4\u56de\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 Integer n1 = 1 ; Integer n2 = 1 ; System . out . println ( n1 == n2 ); // true \u6ce8\u610f\uff0c\u4e0a\u8ff0\u8fc7\u7a0b\u53ea\u662f\u81ea\u52a8\u88c5\u7bb1\u7684\u8282\u7701\u5185\u5b58\u673a\u5236\uff0c\u53d1\u751f\u5728 valueOf() \u4e2d Integer n1 = new Integer ( 1 ); Integer n2 = new Integer ( 2 ); System . out . println ( n1 == n2 ); // false","title":"Primitive type"},{"location":"_basis/primitive_type/#1","text":"Java \u4fdd\u7559\u4e86 8 \u79cd\u57fa\u672c\u7c7b\u578b\uff0c\u4f46\u5b83\u4eec\u4e0d\u662f\u7ee7\u627f\u81ea Object \u7684\u5bf9\u8c61\uff0c\u56e0\u800c\u9700\u8981\u5305\u88c5\u7c7b primitive types : byte char short int float double long boolean wrapper classes : Byte Character Short Integer Float Double Long Boolean trasform : new WrapperClass ( primitive ) <--> WrapperInstance . valueOf () \u4f46\u624b\u52a8\u8f6c\u6362\u4f7f\u5f97\u4ee3\u7801\u7e41\u7410\uff0c\u56e0\u6b64 Java1.5 \u5f15\u5165\u4e86\u81ea\u52a8\u88c5\u7bb1 (autoboxing) \u548c\u81ea\u52a8\u62c6\u7bb1\u7684\u8bed\u6cd5\u7cd6 \u88c5\u7bb1\u65f6\u7f16\u8bd1\u5668\u8c03\u7528\u7c7b\u4f3c valueOf() \u5c06\u539f\u59cb\u7c7b\u578b\u8f6c\u6362\u4e3a\u5bf9\u8c61\uff0c\u62c6\u7bb1\u65f6\u901a\u8fc7\u7c7b\u4f3c intValue() \u7684\u65b9\u6cd5 \u81ea\u52a8\u88c5\u7bb1\u548c\u62c6\u7bb1\u53ef\u80fd\u53d1\u751f\u4e8e\u8d4b\u503c\u65f6\u3001\u65b9\u6cd5\u8c03\u7528\u65f6 // 1. assignment Integer iObj = 3 ; // autoboxing int iPri = iObj ; // autounboxing // 2. call method showInteger ( 3 ); \u81ea\u52a8\u88c5\u7bb1\u673a\u5236\u53ef\u80fd\u4f1a\u521b\u5efa\u65e0\u7528\u5bf9\u8c61\uff0c\u52a0\u91cd\u5783\u573e\u56de\u6536\u7684\u538b\u529b Integer sum = 0 ; for ( int i = 0 ; i < 5000 ; ++ i ) sum += i ; sum += i \u7ecf\u8fc7\u7f16\u8bd1\u5668\u8f6c\u6362\u540e\u53ef\u80fd\u4e3a int result = sum . intValue () + 1 ; Integer sum = new Integer ( result ); \u8fd8\u9700\u8981\u6ce8\u610f: int \u548c Integer \u5728\u91cd\u8f7d\u65f6\u5c5e\u4e8e\u4e0d\u540c\u7c7b\u522b\uff0c\u56e0\u6b64\u8c03\u7528\u91cd\u8f7d\u51fd\u6570\u65e0\u9700\u62c5\u5fc3\u53d1\u751f\u81ea\u52a8\u88c5\u7bb1\u3002 Integer \u672a\u521d\u59cb\u5316\u5219\u503c\u4e3a null \uff0c\u6b64\u65f6\u81ea\u52a8\u62c6\u7bb1 (\u4f8b\u5982 i < 0 ) \u4f1a\u629b\u51fa\u5f02\u5e38","title":"1. \u81ea\u52a8\u88c5\u7bb1"},{"location":"_basis/primitive_type/#2","text":"\u5305\u88c5\u7c7b\u578b\u53ef\u4ee5\u76f4\u63a5\u4e0e\u57fa\u672c\u7c7b\u578b\u6bd4\u8f83\uff0c\u76f8\u5f53\u4e8e\u62ff\u51fa\u5305\u88c5\u7c7b\u578b\u7684\u6570\u503c instance.xxValue() == primitive Integer n1 = 1 ; int n2 = 1 ; System . out . println ( n1 == n2 ); // true Integer.valueOf() \u4f1a\u7f13\u5b58 -128-127 \u8303\u56f4\u7684 Integer \u5bf9\u8c61\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u81ea\u52a8\u88c5\u7bb1\u4e86\u8fd9\u4e2a\u8303\u56f4\u5185\u7684\u67d0\u4e2a\u503c\uff0c\u8fd4\u56de\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61 Integer n1 = 1 ; Integer n2 = 1 ; System . out . println ( n1 == n2 ); // true \u6ce8\u610f\uff0c\u4e0a\u8ff0\u8fc7\u7a0b\u53ea\u662f\u81ea\u52a8\u88c5\u7bb1\u7684\u8282\u7701\u5185\u5b58\u673a\u5236\uff0c\u53d1\u751f\u5728 valueOf() \u4e2d Integer n1 = new Integer ( 1 ); Integer n2 = new Integer ( 2 ); System . out . println ( n1 == n2 ); // false","title":"2. \u81ea\u52a8\u88c5\u7bb1\u4e0e =="},{"location":"_basis/_basis/compound_type/","text":"1. \u6307\u9488\u548c\u5f15\u7528 \u23f3 \u590d\u5408\u7c7b\u578b\u6307\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5305\u62ec\u6307\u9488\u548c\u5f15\u7528\u3002 (1). \u6307\u9488 \u23f3 void* \u662f\u7279\u6b8a\u7c7b\u578b\u7684\u6307\u9488\uff0c\u53ea\u6709\u5185\u5b58\u5730\u5740\u7684\u4fe1\u606f\uff0c\u8bbf\u95ee\u5177\u4f53\u7684\u7c7b\u578b\u5219\u9700\u8f6c\u6362\u3002(C++ \u4e0d\u5141\u8bb8\u4ece void* \u9690\u5f0f\u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b) // three ways to generate empty pointer in C++ int * p1 = nullptr ; int * p2 = 0 ; int * p3 = NULL ; \u5173\u4e8e C++11 \u7684 nullptr \uff1a C \u4e2d\u7684\u5b9a\u4e49\u4e3a #define NULL ((void*) 0) \uff0cC++ \u7684 cstdlib \u51fa\u4e8e\u5f3a\u7c7b\u578b\u5b9a\u4e49\u4e3a #define NULL 0 nullptr \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a\u4efb\u610f\u7684\u6307\u9488\u7c7b\u578b\uff0c\u800c NULL \u65e2\u662f\u6570\u5b57\u53c8\u662f\u6307\u9488\uff0c\u91cd\u8f7d\u65f6\u4f1a\u9020\u6210\u6b67\u4e49 (2). \u5f15\u7528 \u23f3 \u5f15\u7528\u662f\u5bf9\u6307\u9488\u7684\u5305\u88c5\uff0c\u63d0\u4f9b\u4e00\u79cd\u300c\u53d8\u91cf\u522b\u540d\u300d\u7684\u62bd\u8c61\u3002 \u5bf9\u5f15\u7528\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u5bf9\u539f\u5bf9\u8c61\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u800c\u4e0d\u662f\u5bf9\u7ed1\u5b9a\u5173\u7cfb\u7684\u4fee\u6539 \u5f15\u7528\u53ea\u80fd\u4e0e\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u4e0d\u80fd\u662f\u5b57\u9762\u503c\u6216\u8868\u8fbe\u5f0f \u5f15\u7528\u5fc5\u987b\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u521d\u59cb\u5316\u540e\u7ed1\u5b9a\u5173\u95ed\u65e0\u6cd5\u4fee\u6539\uff0c\u5bf9\u5f15\u7528\u751f\u6210\u5f15\u7528\u76f8\u5f53\u4e8e\u5f15\u7528\u539f\u5bf9\u8c61 2. \u9650\u5b9a\u7b26 const \u23f3 (1). const \u4e0e\u5f15\u7528 \u23f3 const + \u5f15\u7528\u7684\u542b\u4e49\u662f\u539f\u5bf9\u8c61\u7684\u503c\u4e0d\u53ef\u901a\u8fc7\u6b64\u5f15\u7528\u4fee\u6539\uff0c\u56e0\u6b64: const \u5f15\u7528\u53ef\u4ee5\u7ed1\u5b9a\u975e const \u7684\u5bf9\u8c61 \u666e\u901a\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a const \u5bf9\u8c61 const \u5f15\u7528\u53ef\u4ee5 \u7ed1\u5b9a\u5e38\u91cf\u3001\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u3001\u7ed1\u5b9a\u8de8\u7c7b\u578b\u7684\u53d8\u91cf (\u7f16\u8bd1\u5668\u751f\u6210\u4e34\u65f6\u91cf) double dval = 3.14 ; const int temp = dval ; const int & ri = dval ; ====> const int & ri = temp ; (2). const \u4e0e\u6307\u9488 \u23f3 * \u5728 const \u540e: \u662f\u4e2a\u6307\u9488\u4e14\u6307\u5411\u5e38\u91cf\uff0c\u9650\u5b9a\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u4fee\u6539\u6307\u5411\u7684\u5e38\u91cf * \u5728 const \u524d: \u662f\u4e2a\u5e38\u91cf\uff0c\u8fd8\u662f\u4e2a\u6307\u9488 (3). \u9876\u5c42 const \u23f3 \u6839\u636e const \u9650\u5b9a\u90e8\u5206\u7684\u4e0d\u540c: \u9876\u5c42 const: \u2002 \u53d8\u91cf\u672c\u8eab\u662f\u5e38\u91cf\uff0c\u4f8b\u5982\u666e\u901a\u5e38\u91cf\u3001\u6307\u9488\u5e38\u91cf \u5e95\u5c42 const: \u2002 \u53d8\u91cf\u6307\u5411\u7684\u5bf9\u8c61\u662f\u5e38\u91cf\uff0c\u4f8b\u5982 const \u5f15\u7528\u3001\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488 \u67d0\u4e2a\u5bf9\u8c61\u88ab\u62f7\u8d1d\u65f6\uff0c\u9876\u5c42 const \u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5e95\u5c42 const \u7684\u6027\u8d28\u5fc5\u987b\u88ab\u4fdd\u6301 const int con = 1 ; int nor = 2 ; int * norPtr = & nor ; const int * lowPtr = & nor ; int * const topPtr = & nor ; int & norRef = nor ; const int & lowRef = con ; const int * test1 = & nor ( \u221a ) | & con ( x ) | lowPtr ( \u221a ) | topPtr ( x ) ; const int & test2 = con ; ( \u221a ) | nor ( \u221a ) | lowRef ( \u221a ) | norRef ( x ) ; int & test3 = lowRef ( x ) | con ( x ) ; \u603b\u4e4b\u5c31\u662f\u5de6\u4fa7\u548c\u53f3\u4fa7\u7684\u503c\u5173\u4e8e\u5e95\u5c42 const \u7684\u6027\u8d28\u534f\u8c03\u3002 (4). const_cast \u23f3 const_cast \u53ef\u4ee5\u53bb\u6389\u5bf9\u8c61\u7684\u5e95\u5c42 const \u5c5e\u6027\u3002 const char * pc ; char * p = const_cast < char *> ( pc ); \u5982\u679c pc \u6307\u5411\u7684\u539f\u5bf9\u8c61\u662f const \u7684\uff0c\u901a\u8fc7 p \u4fee\u6539\u7684\u884c\u4e3a\u662f undefined \u7684\u3002 const_cast \u53ef\u7528\u4e8e: \u6307\u9488\u6216\u5f15\u7528\u62e5\u6709\u5e95\u5c42 const \u5c5e\u6027\u800c\u539f\u5bf9\u8c61\u975e const\uff0c\u53c8\u4e0d\u5f97\u4e0d\u4fee\u6539\u539f\u5bf9\u8c61\u7684\u60c5\u51b5\u3002 \u5728\u51fd\u6570\u91cd\u8f7d\u7684\u60c5\u51b5\u4e0b\u6700\u6709\u7528 (CppPrimer P209) const string & shorterString ( const string & s1 , const string & s2 ) { // func1 return s1 . size () <= s2 . size () ? s1 : s2 ; } const string & shorterString ( string & s1 , string & s2 ) { // func2 auto & r = shorterString ( const_cast < const string &> ( s1 ), const_cast < const string &> ( s2 )); return const_cast < string &> r ; } \u8fd9\u4e2a\u4f8b\u5b50\u9700\u8981\u4f20\u5165 const \u8fd4\u56de const\uff0c\u800c\u4f20\u5165\u975e const \u4e5f\u8981\u8fd4\u56de\u975e const: \u51fd\u6570 1 \u5728\u4f20\u5165\u975e const \u7684 string \u540e\uff0c\u8fd4\u56de\u7684\u4f9d\u7136\u662f const string& \u5e95\u5c42 const \u53c2\u6570\u53ef\u91cd\u8f7d\u4e3a\u4e0d\u540c\u51fd\u6570\uff0c\u51fd\u6570 2 \u5229\u7528\u91cd\u8f7d\u89e3\u51b3\u4e86\u4e0a\u8ff0\u95ee\u9898 \u58f0\u660e\u7b26\u7684\u8bed\u4e49\u5206\u6790 \u23f3 C/C++ \u4e2d\u58f0\u660e\u7b26 (declarator) \u7684\u8bed\u4e49\u89c4\u5219\u5982\u4e0b: \u58f0\u660e\u7b26\u6210\u5206\u7684\u4f18\u5148\u7ea7: \u62ec\u53f7 >> \u540e\u7f00\u7b26 ()\u3001[] >> \u524d\u7f00\u7b26 (*\u3001&\u3001const\u3001\u7c7b\u578b\u7b49) \u524d\u7f00\u7b26\u7684\u5206\u6790\u987a\u5e8f\u662f\u4ece\u53f3\u5411\u5de6 (\u81ea\u5e95\u5411\u4e0a) \u4ece\u6807\u8bc6\u7b26 idenfier \u5f00\u59cb\uff0c\u6309\u7167\u4e0a\u8ff0\u4f18\u5148\u7ea7\u5206\u6790\u8bed\u4e49 int *& r = p ; // r \u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u7684\u662f\u4e00\u4e2a\u6307\u9488 char * const ( * farr [ 10 ])( int ); // farr \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u5b58\u653e\u6307\u9488\uff0c\u5b58\u653e\u7684\u6307\u9488\u6307\u5411\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de char* const char * const * ( * next )(); // next \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c // \u8fd4\u56de\u7684\u6307\u9488\u6307\u5411 char * const \u7c7b\u578b int ( * func ( int i ))[][ 20 ]; // func \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u6307\u5411 int[][20] \u7c7b\u578b\u7684\u6570\u7ec4","title":"compound type"},{"location":"_basis/_basis/compound_type/#1","text":"\u590d\u5408\u7c7b\u578b\u6307\u57fa\u4e8e\u5176\u4ed6\u7c7b\u578b\u5b9a\u4e49\u7684\u7c7b\u578b\uff0c\u5305\u62ec\u6307\u9488\u548c\u5f15\u7528\u3002","title":"1. \u6307\u9488\u548c\u5f15\u7528"},{"location":"_basis/_basis/compound_type/#1_1","text":"void* \u662f\u7279\u6b8a\u7c7b\u578b\u7684\u6307\u9488\uff0c\u53ea\u6709\u5185\u5b58\u5730\u5740\u7684\u4fe1\u606f\uff0c\u8bbf\u95ee\u5177\u4f53\u7684\u7c7b\u578b\u5219\u9700\u8f6c\u6362\u3002(C++ \u4e0d\u5141\u8bb8\u4ece void* \u9690\u5f0f\u8f6c\u6362\u4e3a\u5176\u4ed6\u7c7b\u578b) // three ways to generate empty pointer in C++ int * p1 = nullptr ; int * p2 = 0 ; int * p3 = NULL ; \u5173\u4e8e C++11 \u7684 nullptr \uff1a C \u4e2d\u7684\u5b9a\u4e49\u4e3a #define NULL ((void*) 0) \uff0cC++ \u7684 cstdlib \u51fa\u4e8e\u5f3a\u7c7b\u578b\u5b9a\u4e49\u4e3a #define NULL 0 nullptr \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u4e3a\u4efb\u610f\u7684\u6307\u9488\u7c7b\u578b\uff0c\u800c NULL \u65e2\u662f\u6570\u5b57\u53c8\u662f\u6307\u9488\uff0c\u91cd\u8f7d\u65f6\u4f1a\u9020\u6210\u6b67\u4e49","title":"(1). \u6307\u9488"},{"location":"_basis/_basis/compound_type/#2","text":"\u5f15\u7528\u662f\u5bf9\u6307\u9488\u7684\u5305\u88c5\uff0c\u63d0\u4f9b\u4e00\u79cd\u300c\u53d8\u91cf\u522b\u540d\u300d\u7684\u62bd\u8c61\u3002 \u5bf9\u5f15\u7528\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u76f8\u5f53\u4e8e\u5bf9\u539f\u5bf9\u8c61\u7684\u8d4b\u503c\u548c\u8bbf\u95ee\uff0c\u800c\u4e0d\u662f\u5bf9\u7ed1\u5b9a\u5173\u7cfb\u7684\u4fee\u6539 \u5f15\u7528\u53ea\u80fd\u4e0e\u5bf9\u8c61\u7ed1\u5b9a\uff0c\u4e0d\u80fd\u662f\u5b57\u9762\u503c\u6216\u8868\u8fbe\u5f0f \u5f15\u7528\u5fc5\u987b\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u521d\u59cb\u5316\u540e\u7ed1\u5b9a\u5173\u95ed\u65e0\u6cd5\u4fee\u6539\uff0c\u5bf9\u5f15\u7528\u751f\u6210\u5f15\u7528\u76f8\u5f53\u4e8e\u5f15\u7528\u539f\u5bf9\u8c61","title":"(2). \u5f15\u7528"},{"location":"_basis/_basis/compound_type/#2-const","text":"","title":"2. \u9650\u5b9a\u7b26 const"},{"location":"_basis/_basis/compound_type/#1-const","text":"const + \u5f15\u7528\u7684\u542b\u4e49\u662f\u539f\u5bf9\u8c61\u7684\u503c\u4e0d\u53ef\u901a\u8fc7\u6b64\u5f15\u7528\u4fee\u6539\uff0c\u56e0\u6b64: const \u5f15\u7528\u53ef\u4ee5\u7ed1\u5b9a\u975e const \u7684\u5bf9\u8c61 \u666e\u901a\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a const \u5bf9\u8c61 const \u5f15\u7528\u53ef\u4ee5 \u7ed1\u5b9a\u5e38\u91cf\u3001\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u3001\u7ed1\u5b9a\u8de8\u7c7b\u578b\u7684\u53d8\u91cf (\u7f16\u8bd1\u5668\u751f\u6210\u4e34\u65f6\u91cf) double dval = 3.14 ; const int temp = dval ; const int & ri = dval ; ====> const int & ri = temp ;","title":"(1). const \u4e0e\u5f15\u7528"},{"location":"_basis/_basis/compound_type/#2-const_1","text":"* \u5728 const \u540e: \u662f\u4e2a\u6307\u9488\u4e14\u6307\u5411\u5e38\u91cf\uff0c\u9650\u5b9a\u4e0d\u80fd\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u4fee\u6539\u6307\u5411\u7684\u5e38\u91cf * \u5728 const \u524d: \u662f\u4e2a\u5e38\u91cf\uff0c\u8fd8\u662f\u4e2a\u6307\u9488","title":"(2). const \u4e0e\u6307\u9488"},{"location":"_basis/_basis/compound_type/#3-const","text":"\u6839\u636e const \u9650\u5b9a\u90e8\u5206\u7684\u4e0d\u540c: \u9876\u5c42 const: \u2002 \u53d8\u91cf\u672c\u8eab\u662f\u5e38\u91cf\uff0c\u4f8b\u5982\u666e\u901a\u5e38\u91cf\u3001\u6307\u9488\u5e38\u91cf \u5e95\u5c42 const: \u2002 \u53d8\u91cf\u6307\u5411\u7684\u5bf9\u8c61\u662f\u5e38\u91cf\uff0c\u4f8b\u5982 const \u5f15\u7528\u3001\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488 \u67d0\u4e2a\u5bf9\u8c61\u88ab\u62f7\u8d1d\u65f6\uff0c\u9876\u5c42 const \u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5e95\u5c42 const \u7684\u6027\u8d28\u5fc5\u987b\u88ab\u4fdd\u6301 const int con = 1 ; int nor = 2 ; int * norPtr = & nor ; const int * lowPtr = & nor ; int * const topPtr = & nor ; int & norRef = nor ; const int & lowRef = con ; const int * test1 = & nor ( \u221a ) | & con ( x ) | lowPtr ( \u221a ) | topPtr ( x ) ; const int & test2 = con ; ( \u221a ) | nor ( \u221a ) | lowRef ( \u221a ) | norRef ( x ) ; int & test3 = lowRef ( x ) | con ( x ) ; \u603b\u4e4b\u5c31\u662f\u5de6\u4fa7\u548c\u53f3\u4fa7\u7684\u503c\u5173\u4e8e\u5e95\u5c42 const \u7684\u6027\u8d28\u534f\u8c03\u3002","title":"(3). \u9876\u5c42 const"},{"location":"_basis/_basis/compound_type/#4-const_cast","text":"const_cast \u53ef\u4ee5\u53bb\u6389\u5bf9\u8c61\u7684\u5e95\u5c42 const \u5c5e\u6027\u3002 const char * pc ; char * p = const_cast < char *> ( pc ); \u5982\u679c pc \u6307\u5411\u7684\u539f\u5bf9\u8c61\u662f const \u7684\uff0c\u901a\u8fc7 p \u4fee\u6539\u7684\u884c\u4e3a\u662f undefined \u7684\u3002 const_cast \u53ef\u7528\u4e8e: \u6307\u9488\u6216\u5f15\u7528\u62e5\u6709\u5e95\u5c42 const \u5c5e\u6027\u800c\u539f\u5bf9\u8c61\u975e const\uff0c\u53c8\u4e0d\u5f97\u4e0d\u4fee\u6539\u539f\u5bf9\u8c61\u7684\u60c5\u51b5\u3002 \u5728\u51fd\u6570\u91cd\u8f7d\u7684\u60c5\u51b5\u4e0b\u6700\u6709\u7528 (CppPrimer P209) const string & shorterString ( const string & s1 , const string & s2 ) { // func1 return s1 . size () <= s2 . size () ? s1 : s2 ; } const string & shorterString ( string & s1 , string & s2 ) { // func2 auto & r = shorterString ( const_cast < const string &> ( s1 ), const_cast < const string &> ( s2 )); return const_cast < string &> r ; } \u8fd9\u4e2a\u4f8b\u5b50\u9700\u8981\u4f20\u5165 const \u8fd4\u56de const\uff0c\u800c\u4f20\u5165\u975e const \u4e5f\u8981\u8fd4\u56de\u975e const: \u51fd\u6570 1 \u5728\u4f20\u5165\u975e const \u7684 string \u540e\uff0c\u8fd4\u56de\u7684\u4f9d\u7136\u662f const string& \u5e95\u5c42 const \u53c2\u6570\u53ef\u91cd\u8f7d\u4e3a\u4e0d\u540c\u51fd\u6570\uff0c\u51fd\u6570 2 \u5229\u7528\u91cd\u8f7d\u89e3\u51b3\u4e86\u4e0a\u8ff0\u95ee\u9898","title":"(4). const_cast"},{"location":"_basis/_basis/compound_type/#_1","text":"C/C++ \u4e2d\u58f0\u660e\u7b26 (declarator) \u7684\u8bed\u4e49\u89c4\u5219\u5982\u4e0b: \u58f0\u660e\u7b26\u6210\u5206\u7684\u4f18\u5148\u7ea7: \u62ec\u53f7 >> \u540e\u7f00\u7b26 ()\u3001[] >> \u524d\u7f00\u7b26 (*\u3001&\u3001const\u3001\u7c7b\u578b\u7b49) \u524d\u7f00\u7b26\u7684\u5206\u6790\u987a\u5e8f\u662f\u4ece\u53f3\u5411\u5de6 (\u81ea\u5e95\u5411\u4e0a) \u4ece\u6807\u8bc6\u7b26 idenfier \u5f00\u59cb\uff0c\u6309\u7167\u4e0a\u8ff0\u4f18\u5148\u7ea7\u5206\u6790\u8bed\u4e49 int *& r = p ; // r \u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u7684\u662f\u4e00\u4e2a\u6307\u9488 char * const ( * farr [ 10 ])( int ); // farr \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u5b58\u653e\u6307\u9488\uff0c\u5b58\u653e\u7684\u6307\u9488\u6307\u5411\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de char* const char * const * ( * next )(); // next \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c // \u8fd4\u56de\u7684\u6307\u9488\u6307\u5411 char * const \u7c7b\u578b int ( * func ( int i ))[][ 20 ]; // func \u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u9488\u6307\u5411 int[][20] \u7c7b\u578b\u7684\u6570\u7ec4","title":"\u58f0\u660e\u7b26\u7684\u8bed\u4e49\u5206\u6790"},{"location":"_basis/_basis/list_init/","text":"1. \u5217\u8868\u521d\u59cb\u5316 \u23f3 C++98/03: \u4ec5\u652f\u6301\u6570\u7ec4\u6216 POD \u7c7b\u578b (\u6ca1\u6709\u6784\u9020\u3001\u6790\u6784\u548c\u865a\u51fd\u6570\u7684\u7c7b\u6216\u7ed3\u6784\u4f53) C++11 \u5c06\u5217\u8868\u521d\u59cb\u5316\u63a8\u5e7f\u81f3\u6240\u6709\u7c7b\u578b \u5bf9\u57fa\u672c\u7c7b\u578b\uff0c\u5217\u8868\u521d\u59cb\u5316\u7684\u610f\u4e49\u5728\u4e8e\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u63d0\u9192\u503c\u4e22\u5931 \u5bf9\u7c7b\u7c7b\u578b\uff0c\u65b9\u4fbf\u4e86\u521d\u59cb\u5316\u548c\u8fd4\u56de\u503c \u5c3d\u7ba1\u5982\u6b64\uff0c\u5185\u7f6e\u7c7b\u578b\u4e60\u60ef\u7528\u7b49\u53f7\u521d\u59cb\u5316\uff0c\u7c7b\u7c7b\u578b\u4e60\u60ef\u5706\u62ec\u53f7\u663e\u5f0f\u521d\u59cb\u5316\uff0c vector \u3001 map \u7b49\u624d\u4e60\u60ef\u4e8e\u5217\u8868\u521d\u59cb\u5316 eg1. c++98/03 \u652f\u6301\u7684\u5217\u8868\u521d\u59cb\u5316 int arr [] = { 1 , 2 , 3 , 4 } \uff1b struct data { int x ; int y ; } my_data = { 1 , 2 }; eg2. c++11 \u666e\u901a\u7c7b\u578b\u5217\u8868\u521d\u59cb\u5316 long double id = 3.1415926536 ; int a { id }, b = { id }; // warning int c ( id ), d = id ; // correct eg3. \u5bb9\u5668\u5217\u8868\u521d\u59cb\u5316 vector < int > vec1 { 1 , 2 , 3 , 4 , 5 }; vector < int > vec2 = { 6 , 7 , 8 }; ... vector < int > foo ( int i ) { if ( i < 5 ) return {}; return { 1 , 2 , 3 }; } 2. \u53ef\u53d8\u53c2\u6570 \u23f3 \u7c7b\u7c7b\u578b\u7684\u5217\u8868\u521d\u59cb\u5316\u7531 std::initializer_list \u5b9e\u73b0\uff0c\u5982\u679c\u7528\u82b1\u62ec\u53f7\u521d\u59cb\u5316\u7c7b\u7c7b\u578b\uff0c\u9996\u5148\u4f1a\u627e\u8fd9\u4e2a\u7c7b\u6709\u6ca1\u6709\u53ef\u53d8\u53c2\u6570\u7684 ctor\uff0c\u5982\u679c\u6ca1\u6709\u63a5\u7740\u4f1a\u6309\u76f4\u63a5\u521d\u59cb\u5316\u5904\u7406\u3002 class Cat { public : vector < int > data ; Cat ( initializer_list < int > list ) { for ( auto it = list . begin (); it != list . end (); ++ it ) data . push_back ( * it ); } } \u7c7b\u578b\u4e0d\u540c\u7684\u53ef\u53d8\u53c2\u6570\u9700\u8981\u901a\u8fc7\u6a21\u677f\u5b9e\u73b0\u3002","title":"list inilization"},{"location":"_basis/_basis/list_init/#1","text":"C++98/03: \u4ec5\u652f\u6301\u6570\u7ec4\u6216 POD \u7c7b\u578b (\u6ca1\u6709\u6784\u9020\u3001\u6790\u6784\u548c\u865a\u51fd\u6570\u7684\u7c7b\u6216\u7ed3\u6784\u4f53) C++11 \u5c06\u5217\u8868\u521d\u59cb\u5316\u63a8\u5e7f\u81f3\u6240\u6709\u7c7b\u578b \u5bf9\u57fa\u672c\u7c7b\u578b\uff0c\u5217\u8868\u521d\u59cb\u5316\u7684\u610f\u4e49\u5728\u4e8e\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u63d0\u9192\u503c\u4e22\u5931 \u5bf9\u7c7b\u7c7b\u578b\uff0c\u65b9\u4fbf\u4e86\u521d\u59cb\u5316\u548c\u8fd4\u56de\u503c \u5c3d\u7ba1\u5982\u6b64\uff0c\u5185\u7f6e\u7c7b\u578b\u4e60\u60ef\u7528\u7b49\u53f7\u521d\u59cb\u5316\uff0c\u7c7b\u7c7b\u578b\u4e60\u60ef\u5706\u62ec\u53f7\u663e\u5f0f\u521d\u59cb\u5316\uff0c vector \u3001 map \u7b49\u624d\u4e60\u60ef\u4e8e\u5217\u8868\u521d\u59cb\u5316 eg1. c++98/03 \u652f\u6301\u7684\u5217\u8868\u521d\u59cb\u5316 int arr [] = { 1 , 2 , 3 , 4 } \uff1b struct data { int x ; int y ; } my_data = { 1 , 2 }; eg2. c++11 \u666e\u901a\u7c7b\u578b\u5217\u8868\u521d\u59cb\u5316 long double id = 3.1415926536 ; int a { id }, b = { id }; // warning int c ( id ), d = id ; // correct eg3. \u5bb9\u5668\u5217\u8868\u521d\u59cb\u5316 vector < int > vec1 { 1 , 2 , 3 , 4 , 5 }; vector < int > vec2 = { 6 , 7 , 8 }; ... vector < int > foo ( int i ) { if ( i < 5 ) return {}; return { 1 , 2 , 3 }; }","title":"1. \u5217\u8868\u521d\u59cb\u5316"},{"location":"_basis/_basis/list_init/#2","text":"\u7c7b\u7c7b\u578b\u7684\u5217\u8868\u521d\u59cb\u5316\u7531 std::initializer_list \u5b9e\u73b0\uff0c\u5982\u679c\u7528\u82b1\u62ec\u53f7\u521d\u59cb\u5316\u7c7b\u7c7b\u578b\uff0c\u9996\u5148\u4f1a\u627e\u8fd9\u4e2a\u7c7b\u6709\u6ca1\u6709\u53ef\u53d8\u53c2\u6570\u7684 ctor\uff0c\u5982\u679c\u6ca1\u6709\u63a5\u7740\u4f1a\u6309\u76f4\u63a5\u521d\u59cb\u5316\u5904\u7406\u3002 class Cat { public : vector < int > data ; Cat ( initializer_list < int > list ) { for ( auto it = list . begin (); it != list . end (); ++ it ) data . push_back ( * it ); } } \u7c7b\u578b\u4e0d\u540c\u7684\u53ef\u53d8\u53c2\u6570\u9700\u8981\u901a\u8fc7\u6a21\u677f\u5b9e\u73b0\u3002","title":"2. \u53ef\u53d8\u53c2\u6570"},{"location":"_basis/_basis/smart_pointers/","text":"","title":"Smart pointers"},{"location":"_basis/_basis/type/","text":"1. \u7c7b\u578b\u522b\u540d \u23f3 C++11 \u5f15\u5165 using \uff0c\u76f8\u8f83\u4e8e typedef \uff0c\u5176\u4f7f\u7528\u66f4\u76f4\u89c2\uff0c\u800c\u4e14\u53ef\u7528\u4e8e\u6a21\u677f\u522b\u540d\u3002 typedef \u4e0e const typedef char * pstring ; const pstring cstr = 0 ; \u4e0a\u8ff0\u4ee3\u7801\u4e0d\u662f const char *cstr (\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488)\uff0c\u7531\u4e8e * \u4ece\u58f0\u660e\u7b26\u8f6c\u5165\u7c7b\u578b\u7b26\uff0c cstr \u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf 2. auto \u23f3 auto \u7531 C++11 \u5f15\u5165\uff0c\u7531\u53d8\u91cf\u7684\u521d\u503c\u63a8\u65ad\u53d8\u91cf\u7684\u7c7b\u578b (\u56e0\u6b64\u5fc5\u987b\u88ab\u521d\u59cb\u5316)\u3002 \u5f53\u5f15\u7528\u88ab\u7528\u4f5c\u521d\u503c\uff0c\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u4f5c\u4e3a auto \u7684\u7c7b\u578b (\u4ec5\u9650 auto \u4e0d\u52a0 & ) auto \u5ffd\u7565\u9876\u5c42 const\uff0c\u4fdd\u7559\u5e95\u5c42 const (\u7b26\u5408\u76f4\u89c9) const int num = 2 ; const int & ref = num ; auto a1 = ref ; a1 = 2 ; // \u6b63\u786e: a1 \u7684\u7c7b\u578b\u662f num \u7684\u7c7b\u578b\u4e14\u5ffd\u7565\u9876\u5c42 const\uff0c\u76f8\u5f53\u4e8e int a1 = num; a1 = 2; auto & a2 = ref ; a2 = 2 ; // \u9519\u8bef: a2 \u7684\u7c7b\u578b\u9996\u5148\u662f\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u7684\u8d4b\u503c\u4fdd\u7559\u5e95\u5c42 const auto \u540c\u4e00\u884c\u7c7b\u578b\u76f8\u540c\uff0c\u4f8b\u5982 auto sz = 0, pi = 3.14 \u662f\u9519\u7684 3. decltype \u23f3 \u6709\u65f6\u5e0c\u671b\u63a8\u65ad\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u5e0c\u671b\u7528\u8be5\u8868\u8fbe\u5f0f\u8d4b\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684 decltype // 1. const int ci = 0 , & cj = ci ; decltype ( ci ) x = 0 ; // x: const int decltype ( cj ) y = x ; // y: const int&, must be inited // 2. int i = 42 , * p = & i , & r = i ; decltype ( r + 0 ) b ; // 3. decltype ( * p ) c ; // ERROR: c is int& // 4. decltype ( i ) d ; // d is int decltype (( i )) e ; // ERROR: e is int& 1 . \u5982\u679c decltype \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\u662f\u5355\u53d8\u91cf\uff0c\u4f1a\u4fdd\u7559\u9876\u5c42 const \u548c\u5f15\u7528\u7684\u6027\u8d28\uff1b 2 . r + 0 \u7684\u7ed3\u679c\u662f\u4e00\u4e2a int\uff0c\u56e0\u6b64 b \u662f\u4e00\u4e2a int\uff1b 3 . \u5982\u679c decltype \u7684\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u5219\u83b7\u5f97\u7684\u662f\u5f15\u7528\u7c7b\u578b\uff0c( *p \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5f15\u7528)\uff1b 4 . \u52a0\u4e0a\u62ec\u53f7\u7684\u53d8\u91cf\u88ab\u5f53\u505a\u8868\u8fbe\u5f0f\u5904\u7406\uff0c\u8fd9\u91cc\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 (?)","title":"type"},{"location":"_basis/_basis/type/#1","text":"C++11 \u5f15\u5165 using \uff0c\u76f8\u8f83\u4e8e typedef \uff0c\u5176\u4f7f\u7528\u66f4\u76f4\u89c2\uff0c\u800c\u4e14\u53ef\u7528\u4e8e\u6a21\u677f\u522b\u540d\u3002 typedef \u4e0e const typedef char * pstring ; const pstring cstr = 0 ; \u4e0a\u8ff0\u4ee3\u7801\u4e0d\u662f const char *cstr (\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488)\uff0c\u7531\u4e8e * \u4ece\u58f0\u660e\u7b26\u8f6c\u5165\u7c7b\u578b\u7b26\uff0c cstr \u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf","title":"1. \u7c7b\u578b\u522b\u540d"},{"location":"_basis/_basis/type/#2-auto","text":"auto \u7531 C++11 \u5f15\u5165\uff0c\u7531\u53d8\u91cf\u7684\u521d\u503c\u63a8\u65ad\u53d8\u91cf\u7684\u7c7b\u578b (\u56e0\u6b64\u5fc5\u987b\u88ab\u521d\u59cb\u5316)\u3002 \u5f53\u5f15\u7528\u88ab\u7528\u4f5c\u521d\u503c\uff0c\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u4f5c\u4e3a auto \u7684\u7c7b\u578b (\u4ec5\u9650 auto \u4e0d\u52a0 & ) auto \u5ffd\u7565\u9876\u5c42 const\uff0c\u4fdd\u7559\u5e95\u5c42 const (\u7b26\u5408\u76f4\u89c9) const int num = 2 ; const int & ref = num ; auto a1 = ref ; a1 = 2 ; // \u6b63\u786e: a1 \u7684\u7c7b\u578b\u662f num \u7684\u7c7b\u578b\u4e14\u5ffd\u7565\u9876\u5c42 const\uff0c\u76f8\u5f53\u4e8e int a1 = num; a1 = 2; auto & a2 = ref ; a2 = 2 ; // \u9519\u8bef: a2 \u7684\u7c7b\u578b\u9996\u5148\u662f\u4e2a\u5f15\u7528\uff0c\u5f15\u7528\u7684\u8d4b\u503c\u4fdd\u7559\u5e95\u5c42 const auto \u540c\u4e00\u884c\u7c7b\u578b\u76f8\u540c\uff0c\u4f8b\u5982 auto sz = 0, pi = 3.14 \u662f\u9519\u7684","title":"2. auto"},{"location":"_basis/_basis/type/#3-decltype","text":"\u6709\u65f6\u5e0c\u671b\u63a8\u65ad\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u5e0c\u671b\u7528\u8be5\u8868\u8fbe\u5f0f\u8d4b\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 C++11 \u5f15\u5165\u7684 decltype // 1. const int ci = 0 , & cj = ci ; decltype ( ci ) x = 0 ; // x: const int decltype ( cj ) y = x ; // y: const int&, must be inited // 2. int i = 42 , * p = & i , & r = i ; decltype ( r + 0 ) b ; // 3. decltype ( * p ) c ; // ERROR: c is int& // 4. decltype ( i ) d ; // d is int decltype (( i )) e ; // ERROR: e is int& 1 . \u5982\u679c decltype \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\u662f\u5355\u53d8\u91cf\uff0c\u4f1a\u4fdd\u7559\u9876\u5c42 const \u548c\u5f15\u7528\u7684\u6027\u8d28\uff1b 2 . r + 0 \u7684\u7ed3\u679c\u662f\u4e00\u4e2a int\uff0c\u56e0\u6b64 b \u662f\u4e00\u4e2a int\uff1b 3 . \u5982\u679c decltype \u7684\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u89e3\u5f15\u7528\u64cd\u4f5c\uff0c\u5219\u83b7\u5f97\u7684\u662f\u5f15\u7528\u7c7b\u578b\uff0c( *p \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5f15\u7528)\uff1b 4 . \u52a0\u4e0a\u62ec\u53f7\u7684\u53d8\u91cf\u88ab\u5f53\u505a\u8868\u8fbe\u5f0f\u5904\u7406\uff0c\u8fd9\u91cc\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 (?)","title":"3. decltype"},{"location":"_basis/_containers/sequence/","text":"1. \u987a\u5e8f\u5bb9\u5668\u9009\u62e9 \u23f3 \u2002 vector \u968f\u673a\u8bbf\u95ee O(1)\uff0c\u5c3e\u90e8\u63d2\u5165 O(1) deque \u968f\u673a\u8bbf\u95ee O(1)\uff0c\u5934\u5c3e\u63d2\u5165 O(1) list \u5355\u5411\u94fe\u8868\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 O(1) forward_list \u53cc\u5411\u94fe\u8868\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 O(1) array \u6570\u7ec4\uff0c\u56fa\u5b9a\u5927\u5c0f string \u5b57\u7b26 vector \u9009\u62e9\u5bb9\u5668\u65f6\u9700\u8981\u8003\u8651\u5230: deque \u76f8\u8f83\u4e8e vector \u989d\u5916\u652f\u6301\u5934\u90e8\u63d2\u5165\uff0c\u9700\u8981\u989d\u5916\u7684\u4e00\u4e2a map list \u7684\u6838\u5fc3\u7279\u6027\u5728\u4e8e\u53ef\u4ee5\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 \u9009\u62e9\u5bb9\u5668\u7684\u57fa\u672c\u539f\u5219: \u5c3d\u91cf\u4f7f\u7528 vector \u9700\u8981\u5176\u4ed6\u7279\u6027\u65f6\u518d\u8003\u8651\u5176\u4ed6\u5bb9\u5668\u6216\u8005\u6298\u4e2d 2. \u8fed\u4ee3\u5668\u5931\u6548 \u23f3 \u5bb9\u5668\u589e\u5220\u5143\u7d20\u53ef\u80fd\u5bfc\u81f4 (a). \u8fed\u4ee3\u5668, (b). \u6307\u9488\u6216\u5f15\u7528 \u5931\u6548(undefined) \uff0c\u5bfc\u81f4\u4e25\u91cd\u7684\u8fd0\u884c\u65f6\u9519\u8bef vector / string + : \u2002 \u82e5\u5b58\u50a8\u7a7a\u95f4\u91cd\u5206\u914d\uff0c(a)(b) \u5747\u5931\u6548; \u82e5\u672a\u91cd\u5206\u914d\uff0c\u63d2\u5165\u4f4d\u7f6e\u540e\u7684 (a)(b) \u5931\u6548 - : \u2002 \u88ab\u5220\u5143\u7d20\u53ca\u5176\u540e\u7684 (a)(b) \u5931\u6548 (\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u5931\u6548) deque + : \u2002 \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u90fd\u4f1a\u5bfc\u81f4\u6240\u6709\u5143\u7d20\u7684 (a) \u5931\u6548\uff1b\u53ea\u6709\u5728\u9996\u5c3e\u5916\u7684\u4f4d\u7f6e\u63d2\u5165 (b) \u5931\u6548 - : \u2002 \u5220\u9664\u9996\u5c3e\u4e4b\u5916\u7684\u5143\u7d20\uff0c\u6240\u6709\u5143\u7d20\u7684 (a)(b) \u5931\u6548\uff1b\u5220\u9664\u9996\u5143\u7d20\uff0c\u53ea\u6709\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5176\u4ed6\u4e0d\u53d7\u5f71\u54cd\uff1b\u5220\u9664\u5c3e\u5143\u7d20\uff0c\u5c3e\u5143\u7d20\u548c\u5c3e\u540e\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5176\u4ed6\u4e0d\u53d7\u5f71\u54cd\u3002 list / forward_list + : \u2002 \u65e0\u5f71\u54cd - : \u2002 \u65e0\u5f71\u54cd \u590d\u5236\u5947\u6570\u5220\u9664\u5076\u6570 (\u5229\u7528\u8fd4\u56de\u503c\u4fdd\u5b58 iterator) vector < int > integers { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; auto iter = integers . begin (); while ( iter != integers . end ()) { if ( * iter % 2 ) { iter = integers . insert ( iter , * iter ); iter += 2 ; } else { iter = integers . erase ( iter ); } } \u5728\u6bcf\u4e2a\u5143\u7d20\u540e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20 (\u4e0d\u8981\u4fdd\u5b58 end ) auto begin = v . begin (); while ( begin != v . end ()) { ++ begin ; begin = v . insert ( begin , val ); ++ begin ; } \u4e3a\u4ec0\u4e48\u5728 deque \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u90fd\u4f1a\u5bfc\u81f4\u6240\u6709\u8fed\u4ee3\u5668\u5931\u6548 deque \u5185\u90e8\u662f\u7531\u4e00\u4e2a map \u7ec4\u7ec7\u591a\u4e2a segment\uff0c\u901a\u5e38 map \u524d\u540e\u4f1a\u7559\u4e00\u4e9b\u7a7a\u95f4\u7ed9\u65b0\u589e\u7684 segment\u3002\u5f53\u63d2\u5165\u5bfc\u81f4 map \u6ee1\u4e86\uff0cmap \u5c31\u8981\u91cd\u5206\u914d\uff0c\u800c iterator \u4e3a\u4e86\u5728 segment \u4e4b\u95f4\u8fed\u4ee3\u4f1a\u4fdd\u5b58 map \u7684\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u8981\u63d2\u5165\u5c31\u53ef\u80fd\u5bfc\u81f4\u8fed\u4ee3\u5668\u529f\u80fd\u5931\u6548\uff0c\u800c\u53ea\u8981\u4e0d\u5728\u4e2d\u95f4\u63d2\u5165\u6307\u9488\u548c\u5f15\u7528\u4e0d\u4f1a\u5931\u6548\u3002","title":"1. sequential container"},{"location":"_basis/_containers/sequence/#1","text":"vector \u968f\u673a\u8bbf\u95ee O(1)\uff0c\u5c3e\u90e8\u63d2\u5165 O(1) deque \u968f\u673a\u8bbf\u95ee O(1)\uff0c\u5934\u5c3e\u63d2\u5165 O(1) list \u5355\u5411\u94fe\u8868\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 O(1) forward_list \u53cc\u5411\u94fe\u8868\uff0c\u4e0d\u652f\u6301\u968f\u673a\u8bbf\u95ee\uff0c\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 O(1) array \u6570\u7ec4\uff0c\u56fa\u5b9a\u5927\u5c0f string \u5b57\u7b26 vector \u9009\u62e9\u5bb9\u5668\u65f6\u9700\u8981\u8003\u8651\u5230: deque \u76f8\u8f83\u4e8e vector \u989d\u5916\u652f\u6301\u5934\u90e8\u63d2\u5165\uff0c\u9700\u8981\u989d\u5916\u7684\u4e00\u4e2a map list \u7684\u6838\u5fc3\u7279\u6027\u5728\u4e8e\u53ef\u4ee5\u4efb\u4f55\u4f4d\u7f6e\u63d2\u5165 \u9009\u62e9\u5bb9\u5668\u7684\u57fa\u672c\u539f\u5219: \u5c3d\u91cf\u4f7f\u7528 vector \u9700\u8981\u5176\u4ed6\u7279\u6027\u65f6\u518d\u8003\u8651\u5176\u4ed6\u5bb9\u5668\u6216\u8005\u6298\u4e2d","title":"1. \u987a\u5e8f\u5bb9\u5668\u9009\u62e9"},{"location":"_basis/_containers/sequence/#2","text":"\u5bb9\u5668\u589e\u5220\u5143\u7d20\u53ef\u80fd\u5bfc\u81f4 (a). \u8fed\u4ee3\u5668, (b). \u6307\u9488\u6216\u5f15\u7528 \u5931\u6548(undefined) \uff0c\u5bfc\u81f4\u4e25\u91cd\u7684\u8fd0\u884c\u65f6\u9519\u8bef vector / string + : \u2002 \u82e5\u5b58\u50a8\u7a7a\u95f4\u91cd\u5206\u914d\uff0c(a)(b) \u5747\u5931\u6548; \u82e5\u672a\u91cd\u5206\u914d\uff0c\u63d2\u5165\u4f4d\u7f6e\u540e\u7684 (a)(b) \u5931\u6548 - : \u2002 \u88ab\u5220\u5143\u7d20\u53ca\u5176\u540e\u7684 (a)(b) \u5931\u6548 (\u5c3e\u540e\u8fed\u4ee3\u5668\u603b\u5931\u6548) deque + : \u2002 \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u90fd\u4f1a\u5bfc\u81f4\u6240\u6709\u5143\u7d20\u7684 (a) \u5931\u6548\uff1b\u53ea\u6709\u5728\u9996\u5c3e\u5916\u7684\u4f4d\u7f6e\u63d2\u5165 (b) \u5931\u6548 - : \u2002 \u5220\u9664\u9996\u5c3e\u4e4b\u5916\u7684\u5143\u7d20\uff0c\u6240\u6709\u5143\u7d20\u7684 (a)(b) \u5931\u6548\uff1b\u5220\u9664\u9996\u5143\u7d20\uff0c\u53ea\u6709\u9996\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5176\u4ed6\u4e0d\u53d7\u5f71\u54cd\uff1b\u5220\u9664\u5c3e\u5143\u7d20\uff0c\u5c3e\u5143\u7d20\u548c\u5c3e\u540e\u8fed\u4ee3\u5668\u5931\u6548\uff0c\u5176\u4ed6\u4e0d\u53d7\u5f71\u54cd\u3002 list / forward_list + : \u2002 \u65e0\u5f71\u54cd - : \u2002 \u65e0\u5f71\u54cd \u590d\u5236\u5947\u6570\u5220\u9664\u5076\u6570 (\u5229\u7528\u8fd4\u56de\u503c\u4fdd\u5b58 iterator) vector < int > integers { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; auto iter = integers . begin (); while ( iter != integers . end ()) { if ( * iter % 2 ) { iter = integers . insert ( iter , * iter ); iter += 2 ; } else { iter = integers . erase ( iter ); } } \u5728\u6bcf\u4e2a\u5143\u7d20\u540e\u63d2\u5165\u4e00\u4e2a\u5143\u7d20 (\u4e0d\u8981\u4fdd\u5b58 end ) auto begin = v . begin (); while ( begin != v . end ()) { ++ begin ; begin = v . insert ( begin , val ); ++ begin ; } \u4e3a\u4ec0\u4e48\u5728 deque \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u90fd\u4f1a\u5bfc\u81f4\u6240\u6709\u8fed\u4ee3\u5668\u5931\u6548 deque \u5185\u90e8\u662f\u7531\u4e00\u4e2a map \u7ec4\u7ec7\u591a\u4e2a segment\uff0c\u901a\u5e38 map \u524d\u540e\u4f1a\u7559\u4e00\u4e9b\u7a7a\u95f4\u7ed9\u65b0\u589e\u7684 segment\u3002\u5f53\u63d2\u5165\u5bfc\u81f4 map \u6ee1\u4e86\uff0cmap \u5c31\u8981\u91cd\u5206\u914d\uff0c\u800c iterator \u4e3a\u4e86\u5728 segment \u4e4b\u95f4\u8fed\u4ee3\u4f1a\u4fdd\u5b58 map \u7684\u5730\u5740\uff0c\u56e0\u6b64\u53ea\u8981\u63d2\u5165\u5c31\u53ef\u80fd\u5bfc\u81f4\u8fed\u4ee3\u5668\u529f\u80fd\u5931\u6548\uff0c\u800c\u53ea\u8981\u4e0d\u5728\u4e2d\u95f4\u63d2\u5165\u6307\u9488\u548c\u5f15\u7528\u4e0d\u4f1a\u5931\u6548\u3002","title":"2. \u8fed\u4ee3\u5668\u5931\u6548"},{"location":"_basis/_containers/_apis/seq_api/","text":"","title":"seq api"},{"location":"_basis/_copy_control/constructor/","text":"1. \u6784\u9020\u51fd\u6570\u521d\u503c\u8868 \u23f3 Ctor ( param1 , ...) : member1 ( param2 ), member2 ( expr ) { ... } C++ \u7c7b\u6210\u5458\u7684\u521d\u59cb\u5316\u903b\u8f91: \u9996\u5148\uff0c\u6839\u636e\u5728\u7c7b\u5185\u51fa\u73b0\u7684\u6b21\u5e8f\u786e\u5b9a\u6210\u5458\u987a\u5e8f \u6bcf\u4e2a\u6210\u5458\u6309\u7167 \u300cinitializer list => \u7c7b\u5185\u503c => \u9ed8\u8ba4\u521d\u59cb\u5316\u300d\u7684\u6b21\u5e8f\uff0c\u627e\u5230\u521d\u59cb\u5316\u7684\u673a\u4f1a\u540e break \u8fdb\u5165\u6784\u9020\u51fd\u6570\u4f53\u540e\uff0c\u5c31\u7ed3\u675f\u4e86\u521d\u59cb\u5316\u8fdb\u5165\u8d4b\u503c\u7684\u8fc7\u7a0b\u3002initializer list \u7684\u4e00\u90e8\u5206\u610f\u4e49\u5728\u4e8e \u662f const \u7c7b\u578b\u3001\u5f15\u7528\u7c7b\u578b\u3001?\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u7c7b\u578b? \u901a\u8fc7\u53c2\u6570\u521d\u59cb\u5316\u7684\u552f\u4e00\u673a\u4f1a \u67d0\u4e9b\u7c7b\u6d89\u53ca\u521d\u59cb\u5316\u548c\u8d4b\u503c\u7684\u5e95\u5c42\u6548\u7387\u95ee\u9898 2. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 \u23f3 \u5bf9\u4e8e\u7c7b\u5bf9\u8c61\uff0c\u8bed\u53e5 Obj obj; \u6216 new Obj(); \u4f1a\u6267\u884c\u5bf9\u8c61\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 (\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570) \u5b8c\u6210\u9ed8\u8ba4\u521d\u59cb\u5316\u3002\u5982\u679c\u7c7b\u4e2d\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u90fd\u6ca1\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u300c\u5408\u6210\u7684 (synthesized) \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u300d\uff0c\u5176\u521d\u59cb\u5316\u884c\u4e3a: 1 . \u5982\u679c\u5b58\u5728\u7c7b\u5185\u503c\uff0c\u5219\u7528\u7c7b\u5185\u503c\u521d\u59cb\u5316\u6210\u5458 2 . \u5426\u5219\uff0c\u6267\u884c\u76f8\u5e94\u6210\u5458\u7684\u9ed8\u8ba4\u521d\u59cb\u5316 \u5982\u679c\u7c7b\u4e2d\u5b58\u5728\u5176\u4ed6\u6709\u53c2\u6784\u9020\u51fd\u6570\uff0c\u8fd8\u60f3\u8981\u4e00\u4e2a\u548c \u300c\u5408\u6210\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u300d\u76f8\u540c\u529f\u80fd\u7684\u6784\u9020\u51fd\u6570\uff0cC++11 \u5f15\u5165\u4e86 =default class A { A () = default ; }; \u5e76\u4e0d\u63a8\u8350\u8fd9\u6837\u505a\uff0c\u4f8b\u5982\u6570\u7ec4\u548c\u6307\u9488\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u662f undefined. 3. \u5355\u53c2\u6784\u9020\u51fd\u6570 \u23f3 \u5355\u53c2\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5f62\u5f0f (\u5047\u8bbe class A \u6709 ctor A(A& a) { } ) \u663e\u5f0f: \u76f4\u63a5\u521d\u59cb\u5316\uff0c\u5f62\u5982 A a2(a); \u6216 A a2 = A(a) \u3001 A *a2 = new A(a) \u7b49 \u9690\u5f0f: \u7531\u7b49\u53f7\u521d\u59cb\u5316\uff0c\u5f62\u5982 A a3 = a2 (\u4ee5\u53ca\u51fd\u6570\u4f20\u53c2\u3001\u8fd4\u56de\u503c\u7b49\u60c5\u51b5)\uff0c\u7c7b\u578b\u76f8\u540c\u65f6\u8c03\u7528\u62f7\u8d1d ctor\uff0c\u7c7b\u578b\u4e0d\u540c\u8c03\u7528\u76f8\u5e94\u7684 ctor \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u4e5f\u5c31\u662f\u5f62\u53c2\u548c\u672c\u7c7b\u578b\u4e0d\u540c\u7684\u9690\u5f0f\u521d\u59cb\u5316 class Book { public : Book ( string s ) { cout << \"inited\" << endl ; } }; void read ( Book book ) { cout << \"reading\" << endl ; } int main () { Book book ( string ( \"Org\" )); // \u663e\u5f0f\u76f4\u63a5\u8c03\u7528 read ( string ( \"Eat\" )); // \u9690\u5f0f\u8c03\u7528 case2 Book book = string ( \"Sleep\" ); // \u9690\u5f0f\u8c03\u7528 case1 } explicit \u53ef\u4ee5\u6291\u5236\u9690\u5f0f\u8c03\u7528\uff0ci.e. \u9650\u5236\u67d0\u79cd\u7c7b\u578b\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u4fa7 explicit Book ( string s ) { ... } \u6807\u51c6\u5e93\u4e2d\u7684\u8f6c\u6362\u6784\u9020\u51fd\u6570: \u5355\u53c2\u6570 const char* \u7684 string \uff0c\u4e0d\u662f explicit \u7684 \u5355\u5bb9\u91cf\u53c2\u6570\u7684 vector \uff0c\u662f explicit \u7684 \u7f16\u5199\u5355\u53c2\u6784\u9020\u51fd\u6570\u65f6\uff0c\u9700\u8981\u8003\u8651\u662f\u5426\u6709\u62f7\u8d1d\u7684\u8bed\u4e49 4. \u59d4\u6258\u6784\u9020\u51fd\u6570 \u23f3 \u628a\u81ea\u5df1\u7684\u4e00\u90e8\u5206\u804c\u8d23\u59d4\u6258\u7ed9\u5176\u4ed6\u6784\u9020\u51fd\u6570\u3002 struct A { char a , b ; A ( char i , char j ) : a ( i ), b ( j ) { } A ( string s ) : A ( s [ 0 ], s [ 1 ]) { } };","title":"constructors"},{"location":"_basis/_copy_control/constructor/#1","text":"Ctor ( param1 , ...) : member1 ( param2 ), member2 ( expr ) { ... } C++ \u7c7b\u6210\u5458\u7684\u521d\u59cb\u5316\u903b\u8f91: \u9996\u5148\uff0c\u6839\u636e\u5728\u7c7b\u5185\u51fa\u73b0\u7684\u6b21\u5e8f\u786e\u5b9a\u6210\u5458\u987a\u5e8f \u6bcf\u4e2a\u6210\u5458\u6309\u7167 \u300cinitializer list => \u7c7b\u5185\u503c => \u9ed8\u8ba4\u521d\u59cb\u5316\u300d\u7684\u6b21\u5e8f\uff0c\u627e\u5230\u521d\u59cb\u5316\u7684\u673a\u4f1a\u540e break \u8fdb\u5165\u6784\u9020\u51fd\u6570\u4f53\u540e\uff0c\u5c31\u7ed3\u675f\u4e86\u521d\u59cb\u5316\u8fdb\u5165\u8d4b\u503c\u7684\u8fc7\u7a0b\u3002initializer list \u7684\u4e00\u90e8\u5206\u610f\u4e49\u5728\u4e8e \u662f const \u7c7b\u578b\u3001\u5f15\u7528\u7c7b\u578b\u3001?\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u7c7b\u578b? \u901a\u8fc7\u53c2\u6570\u521d\u59cb\u5316\u7684\u552f\u4e00\u673a\u4f1a \u67d0\u4e9b\u7c7b\u6d89\u53ca\u521d\u59cb\u5316\u548c\u8d4b\u503c\u7684\u5e95\u5c42\u6548\u7387\u95ee\u9898","title":"1. \u6784\u9020\u51fd\u6570\u521d\u503c\u8868"},{"location":"_basis/_copy_control/constructor/#2","text":"\u5bf9\u4e8e\u7c7b\u5bf9\u8c61\uff0c\u8bed\u53e5 Obj obj; \u6216 new Obj(); \u4f1a\u6267\u884c\u5bf9\u8c61\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 (\u65e0\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570) \u5b8c\u6210\u9ed8\u8ba4\u521d\u59cb\u5316\u3002\u5982\u679c\u7c7b\u4e2d\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u90fd\u6ca1\u6709\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u300c\u5408\u6210\u7684 (synthesized) \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u300d\uff0c\u5176\u521d\u59cb\u5316\u884c\u4e3a: 1 . \u5982\u679c\u5b58\u5728\u7c7b\u5185\u503c\uff0c\u5219\u7528\u7c7b\u5185\u503c\u521d\u59cb\u5316\u6210\u5458 2 . \u5426\u5219\uff0c\u6267\u884c\u76f8\u5e94\u6210\u5458\u7684\u9ed8\u8ba4\u521d\u59cb\u5316 \u5982\u679c\u7c7b\u4e2d\u5b58\u5728\u5176\u4ed6\u6709\u53c2\u6784\u9020\u51fd\u6570\uff0c\u8fd8\u60f3\u8981\u4e00\u4e2a\u548c \u300c\u5408\u6210\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u300d\u76f8\u540c\u529f\u80fd\u7684\u6784\u9020\u51fd\u6570\uff0cC++11 \u5f15\u5165\u4e86 =default class A { A () = default ; }; \u5e76\u4e0d\u63a8\u8350\u8fd9\u6837\u505a\uff0c\u4f8b\u5982\u6570\u7ec4\u548c\u6307\u9488\u7684\u9ed8\u8ba4\u521d\u59cb\u5316\u503c\u662f undefined.","title":"2. \u9ed8\u8ba4\u6784\u9020\u51fd\u6570"},{"location":"_basis/_copy_control/constructor/#3","text":"\u5355\u53c2\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5f62\u5f0f (\u5047\u8bbe class A \u6709 ctor A(A& a) { } ) \u663e\u5f0f: \u76f4\u63a5\u521d\u59cb\u5316\uff0c\u5f62\u5982 A a2(a); \u6216 A a2 = A(a) \u3001 A *a2 = new A(a) \u7b49 \u9690\u5f0f: \u7531\u7b49\u53f7\u521d\u59cb\u5316\uff0c\u5f62\u5982 A a3 = a2 (\u4ee5\u53ca\u51fd\u6570\u4f20\u53c2\u3001\u8fd4\u56de\u503c\u7b49\u60c5\u51b5)\uff0c\u7c7b\u578b\u76f8\u540c\u65f6\u8c03\u7528\u62f7\u8d1d ctor\uff0c\u7c7b\u578b\u4e0d\u540c\u8c03\u7528\u76f8\u5e94\u7684 ctor \u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\u4e5f\u5c31\u662f\u5f62\u53c2\u548c\u672c\u7c7b\u578b\u4e0d\u540c\u7684\u9690\u5f0f\u521d\u59cb\u5316 class Book { public : Book ( string s ) { cout << \"inited\" << endl ; } }; void read ( Book book ) { cout << \"reading\" << endl ; } int main () { Book book ( string ( \"Org\" )); // \u663e\u5f0f\u76f4\u63a5\u8c03\u7528 read ( string ( \"Eat\" )); // \u9690\u5f0f\u8c03\u7528 case2 Book book = string ( \"Sleep\" ); // \u9690\u5f0f\u8c03\u7528 case1 } explicit \u53ef\u4ee5\u6291\u5236\u9690\u5f0f\u8c03\u7528\uff0ci.e. \u9650\u5236\u67d0\u79cd\u7c7b\u578b\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u4fa7 explicit Book ( string s ) { ... } \u6807\u51c6\u5e93\u4e2d\u7684\u8f6c\u6362\u6784\u9020\u51fd\u6570: \u5355\u53c2\u6570 const char* \u7684 string \uff0c\u4e0d\u662f explicit \u7684 \u5355\u5bb9\u91cf\u53c2\u6570\u7684 vector \uff0c\u662f explicit \u7684 \u7f16\u5199\u5355\u53c2\u6784\u9020\u51fd\u6570\u65f6\uff0c\u9700\u8981\u8003\u8651\u662f\u5426\u6709\u62f7\u8d1d\u7684\u8bed\u4e49","title":"3. \u5355\u53c2\u6784\u9020\u51fd\u6570"},{"location":"_basis/_copy_control/constructor/#4","text":"\u628a\u81ea\u5df1\u7684\u4e00\u90e8\u5206\u804c\u8d23\u59d4\u6258\u7ed9\u5176\u4ed6\u6784\u9020\u51fd\u6570\u3002 struct A { char a , b ; A ( char i , char j ) : a ( i ), b ( j ) { } A ( string s ) : A ( s [ 0 ], s [ 1 ]) { } };","title":"4. \u59d4\u6258\u6784\u9020\u51fd\u6570"},{"location":"_basis/_copy_control/copy_control1/","text":"1. \u62f7\u8d1d \u23f3 (1). \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u23f3 \u53ef\u89c6\u4e3a\u5355\u53c2\u6784\u9020\u51fd\u6570\u7684\u4e00\u79cd\u7279\u4f8b\uff0c\u53ef\u663e\u5f0f\u8c03\u7528\u4e5f\u53ef\u9690\u5f0f\u8c03\u7528\uff0c(\u51e0\u4e4e\u6ca1\u6709 explicit \u7684\u60c5\u51b5) \u53c2\u6570\u5fc5\u987b\u662f\u5f15\u7528\u7c7b\u578b (\u901a\u5e38\u52a0 const )\u3002\u5426\u5219\uff0c\u4e3a\u4e86\u8c03\u7528\u62f7\u8d1d ctor \u9700\u8981\u62f7\u8d1d\u5b9e\u53c2\uff0c\u800c\u62f7\u8d1d\u5b9e\u53c2\u53c8\u9700\u8981\u8c03\u7528\u62f7\u8d1d ctor \u82e5\u672a\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u9ed8\u8ba4\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c \u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u6240\u6709\u975e static \u6210\u5458\u62f7\u8d1d\u5230\u65b0\u5bf9\u8c61\u4e2d\uff0c\u5bf9\u4e8e\u7c7b\u5bf9\u8c61\u4f1a\u8c03\u7528\u5176\u62f7\u8d1d ctor\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4f1a\u62f7\u8d1d\u6bcf\u4e00\u4e2a\u5355\u5143 class Book { string name ; int nPages ; public : // \u548c\u5408\u6210\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u903b\u8f91\u7b49\u4ef7 Book ( const Book & book ) : name ( book . name ), nPages ( book . nPages ) { } }; (2). \u8d4b\u503c (\u62f7\u8d1d) \u8fd0\u7b97\u7b26 \u23f3 \u7c7b\u9700\u8981\u63a7\u5236\u5176\u5bf9\u8c61\u5982\u4f55\u8d4b\u503c \u8d4b\u503c\u8fd0\u7b97\u7b26\u5fc5\u987b\u5728\u7c7b\u5185\u91cd\u8f7d\uff0c\u4e3a\u5b9e\u73b0\u53f3\u5411\u5de6\u7684\u8fde\u7eed\u8d4b\u503c\uff0c\u8fd4\u56de\u503c\u662f\u81ea\u8eab\u5f15\u7528 Obj& o = *this; \u82e5\u672a\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u7f16\u8bd1\u5668\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u53f3\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u975e static \u6210\u5458\u8d4b\u503c\u7ed9\u5de6\u4fa7\u5bf9\u8c61\u7684\u6210\u5458 Book & operator = ( const Book & book ) { name = book . name ; nPages = book . nPages ; } (3). \u963b\u6b62\u62f7\u8d1d \u23f3 \u5373\u4f7f\u4e0d\u5b9a\u4e49\u62f7\u8d1d\u63a7\u5236\u6210\u5458\uff0c\u7f16\u8bd1\u5668\u4ecd\u4f1a\u81ea\u52a8\u751f\u6210\uff0c\u7981\u6b62\u62f7\u8d1d\u9700\u8981 =delete \u663e\u5f0f\u58f0\u660e =delete \u53ef\u4ee5\u5bf9\u4efb\u4f55\u51fd\u6570\u58f0\u660e\uff0c\u901a\u77e5\u7f16\u8bd1\u5668\u4e0d\u5e0c\u671b\u5b9a\u4e49\u8fd9\u4e9b\u6210\u5458 \u5982\u679c\u5bf9\u6790\u6784\u51fd\u6570\u58f0\u660e =delete \uff0c\u7531\u4e8e\u65e0\u6cd5\u6790\u6784\uff0c\u8be5\u5bf9\u8c61\u53ea\u80fd\u7531 new \u521b\u5efa\uff0c\u4e14\u4e0d\u80fd\u88ab delete \u65e7\u7684\u6807\u51c6\u5b9e\u73b0\u963b\u6b62\u62f7\u8d1d\u7684\u65b9\u5f0f\u662f\u58f0\u660e private \u5982\u679c\u4e00\u4e2a\u7c7b\u6709\u6210\u5458\u65e0\u6cd5\u88ab\u9ed8\u8ba4\u6784\u9020\u3001\u62f7\u8d1d\u3001\u8d4b\u503c\u6216\u9500\u6bc1\uff0c\u5bf9\u5e94 \u5408\u6210\u51fd\u6570 \u662f =delete \u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u6790\u6784\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u6709\u4e00\u4e2a\u65e0\u7c7b\u5185\u521d\u59cb\u503c\u7684\u5f15\u7528\u6210\u5458 / \u7c7b\u6709\u4e00\u4e2a\u65e0\u7c7b\u5185\u521d\u59cb\u503c\u4e14\u65e0\u9ed8\u8ba4 ctor \u7684 const \u6210\u5458\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u6784\u9020\u51fd\u6570\u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u6709\u5f15\u7528\u6210\u5458 / \u7c7b\u6709 const \u6210\u5458\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u8d4b\u503c\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u67d0\u6210\u5458\u7684\u6790\u6784\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u62f7\u8d1d ctor \u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 (?-p451) 2. \u6790\u6784 \u23f3 \u5bf9\u4e8e\u6790\u6784\u51fd\u6570: \u6790\u6784\u51fd\u6570\u9996\u5148\u6267\u884c\u51fd\u6570\u4f53\uff0c\u7136\u540e\u9690\u5f0f\u5730\u6309\u521d\u59cb\u5316\u7684\u9006\u5e8f\u9500\u6bc1\u6210\u5458\uff0c\u51fd\u6570\u4f53\u5185\u901a\u5e38\u91ca\u653e\u5bf9\u8c61\u5728\u751f\u5b58\u671f\u5185\u5206\u914d\u7684\u6240\u6709\u8d44\u6e90 \u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u65e0\u6cd5\u88ab\u91cd\u8f7d\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a \u82e5\u672a\u5b9a\u4e49\u6790\u6784\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u9ed8\u8ba4\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c\uff0c\u5176\u51fd\u6570\u4f53\u4e3a\u7a7a \u4e3a\u4ec0\u4e48\u8981\u9006\u5e8f\u6790\u6784: \u5982\u679c\u987a\u5e8f\u6790\u6784\uff0c\u53ef\u80fd\u5bfc\u81f4\u540e\u9762\u7684\u5143\u7d20\u6301\u6709\u65e0\u6548\u7684\u5f15\u7528\u6216\u6307\u9488 \u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u8c03\u7528\u7684\u65f6\u673a \u6808\u5bf9\u8c61: \u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u9500\u6bc1 \u5806\u5bf9\u8c61: \u5bf9\u5f15\u7528\u5b83\u7684\u6307\u9488 delete \u65f6\u88ab\u9500\u6bc1 \u4e34\u65f6\u5bf9\u8c61: \u521b\u5efa\u5b83\u7684\u5b8c\u6574\u8868\u8fbe\u5f0f\u7ed3\u675f\u65f6\u88ab\u9500\u6bc1 \u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u5176\u6210\u5458\u88ab\u6790\u6784\uff1b\u5bb9\u5668/\u6570\u7ec4\u88ab\u6790\u6784\uff0c\u5176\u5143\u7d20\u88ab\u6790\u6784\u3002 3. \u79fb\u52a8 \u23f3 \u5047\u8bbe\u9700\u8981\u62f7\u8d1d\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u968f\u540e\u820d\u5f03\u4e34\u65f6\u5bf9\u8c61\u3002\u5982\u679c\u8c03\u7528\u62f7\u8d1d\u51fd\u6570\uff0c\u62f7\u8d1d\u4e34\u65f6\u5bf9\u8c61\u4e2d\u7684\u8d44\u6e90\u4f1a\u9020\u6210\u4e00\u5b9a\u6d6a\u8d39\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u63a5\u7ba1\u4e34\u65f6\u5bf9\u8c61\u7684\u8d44\u6e90\uff0c\u53f3\u503c\u5f15\u7528\u5c31\u662f\u4e3a\u79fb\u52a8\u8bed\u4e49\u521b\u9020\u7684\u4e00\u79cd\u6807\u8bb0\u3002 (1). \u53f3\u503c\u5f15\u7528 \u23f3 \u548c\u5de6\u503c\u5f15\u7528\u76f8\u53cd\uff0c\u53f3\u503c\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\u4e0a\uff0c\u53f3\u503c\u5bd3\u4e49\u77ed\u6682 int i = 42 , & r = i ; int && rr = i * 42 ; \u53f3\u503c\u5f15\u7528\u7ed1\u5b9a\u5de6\u503c\uff0c\u9700\u8981 <utility> \u4e2d\u7684 move \u51fd\u6570 int && rr = std :: move ( r ); (2). \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u23f3 \u79fb\u52a8\u6784\u9020\u51fd\u6570\u9700\u8981\u5b8c\u6210: \u63a5\u7ba1\u8d44\u6e90\uff0c\u4ee5\u79fb\u540e\u6e90\u88ab\u9500\u6bc1\u4e3a\u524d\u63d0\uff0c\u8003\u8651\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u6709\u6548 (\u4ee5\u53ca\u5982\u679c\u5176\u4ed6\u6210\u5458\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u7684\u6709\u6548\u6027) \u82e5\u4f20\u5165\u53f3\u503c\u4e14\u672a\u5b9a\u4e49\u79fb\u52a8 ctor\uff0c\u4e5f\u4f1a\u8c03\u7528\u62f7\u8d1d ctor (\u5408\u7406) \u5f53\u4e00\u4e2a\u7c7b\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u62f7\u8d1d\u63a7\u5236\u6210\u5458 (3 \u4e2a)\uff0c\u4e14\u6bcf\u4e2a\u975e static \u6210\u5458\u90fd\u53ef\u79fb\u52a8\uff0c\u7f16\u8bd1\u5668\u624d\u4f1a\u5408\u6210\u79fb\u52a8 ctor\u3001\u79fb\u52a8\u8d4b\u503c Book ( Book && book ) noexcept : rsc ( book . rsc ) { book . rsc = nullptr ; } \u79fb\u52a8\u3001\u6807\u51c6\u5e93\u5bb9\u5668\u548c\u5f02\u5e38 vector \u9700\u8981\u4fdd\u8bc1 push_back \u53d1\u751f\u5f02\u5e38\u65f6\u4fdd\u6301\u4e0d\u53d8\u3002\u8003\u8651 vector \u7684 reallocate \u8fc7\u7a0b\u53ef\u80fd\u7684\u60c5\u51b5: \u82e5\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u65e7\u5143\u7d20\u59cb\u7ec8\u4fdd\u6301\u4e0d\u53d8\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\u5219\u4ea4\u7531\u7528\u6237\u5904\u7406 \u82e5\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5728\u8fd8\u672a\u79fb\u52a8\u5b8c\u65f6\u53d1\u751f\u5f02\u5e38\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898 \u56e0\u6b64\uff0c\u8981\u60f3\u8ba9 vector \u4f7f\u7528\u79fb\u52a8\u64cd\u4f5c\uff0c\u5b9a\u4e49\u79fb\u52a8 ctor \u7684\u540c\u65f6\u8fd8\u8981\u58f0\u660e noexcept (3). \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 \u23f3 \u9700\u8981\u989d\u5916\u8003\u8651\u81ea\u8d4b\u503c Book & operator ( Book && book ) noexcept { if ( this != & book ) { ... } return * this ; } 4. \u4e09/\u4e94\u6cd5\u5219 \u23f3 \u9700\u8981\u6790\u6784\u51fd\u6570\u7684\u7c7b\u4e5f\u9700\u8981\u62f7\u8d1d\u548c\u8d4b\u503c\u64cd\u4f5c \u23f3 \u901a\u5e38\u5bf9\u4e8e\u6790\u6784\u51fd\u6570\u7684\u9700\u6c42\u66f4\u52a0\u660e\u663e\uff0c\u800c\u8981\u662f\u9700\u8981\u6790\u6784\u51fd\u6570\uff0c\u51e0\u4e4e\u4e00\u5b9a\u4f1a\u9700\u8981\u62f7\u8d1d\u548c\u8d4b\u503c\u3002 class HasPtr { string * ps ; int i ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ) {} ~ HasPtr () { delete ps ; } } \u9ed8\u8ba4\u7684\u62f7\u8d1d\u884c\u4e3a\u4f1a\u62f7\u8d1d\u6307\u9488\uff0c\u5728\u6790\u6784\u65f6\u53ef\u80fd\u4f1a delete \u540c\u4e00\u6307\u9488\u591a\u6b21\uff0c\u8fd9\u662f undefined \u7684\u3002 \u9700\u8981\u62f7\u8d1d\u4e5f\u9700\u8981\u8d4b\u503c\uff0c\u53cd\u4e4b\u4ea6\u7136 \u23f3 \u4e3e\u4f8b\uff0c\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u6709\u4e2a\u552f\u4e00 id \u62f7\u8d1d\u65f6\uff0c\u7531\u4e8e\u6784\u9020\u65b0\u5bf9\u8c61\uff0c\u9700\u8981\u8c03\u6574 id \u8d4b\u503c\u65f6\uff0c\u7531\u4e8e\u5bf9\u8c61\u4e0d\u540c\uff0c\u8981\u907f\u514d id \u88ab\u590d\u5236 \u4f8b: \u8bbe\u8ba1 HasPtr \u23f3 \u8bbe\u8ba1\u7c7b\u7684\u65f6\u5019\uff0c\u786e\u5b9a\u9700\u8981\u6790\u6784\u51fd\u6570\u540e\uff0c\u5f80\u5f80\u9700\u8981\u8003\u8651\u5b83\u7684\u62f7\u8d1d\u8bed\u4e49: \u7c7b\u7684\u884c\u4e3a\u50cf\u503c\uff0c\u6709\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u526f\u672c\u548c\u539f\u5bf9\u8c61\u72ec\u7acb \u7c7b\u7684\u884c\u4e3a\u50cf\u6307\u9488\uff0c\u5171\u4eab\u5e95\u5c42\u6570\u636e (1). \u884c\u4e3a\u50cf\u503c\u7684\u7c7b \u23f3 copy ctor: \u62f7\u8d1d string \u7684\u503c dtor: \u91ca\u653e string op=: \u91ca\u653e\u5f53\u524d string \uff0c\u4ece\u53f3\u4fa7\u5bf9\u8c61\u62f7\u8d1d string example: like a value class HasPtr { private : string * ps ; int i ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ) { } HasPtr ( const HasPtr & hp ) : ps ( new string ( * hp . ps )), i ( hp . i ) { } HasPtr & operator = ( const HasPtr & hp ) { auto newp = new string ( * hp . ps ); delete ps ; ps = newp ; i = hp . i ; return * this ; } ~ HasPtr () { delete ps ; } }; \u9700\u8981\u989d\u5916\u6ce8\u610f\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u5982\u679c\u76f4\u63a5\u91ca\u653e\u4e86 ps \u5c31\u4f1a\u51fa\u9519 (2). \u884c\u4e3a\u50cf\u6307\u9488\u7684\u7c7b \u23f3 ctor \u521d\u59cb\u5316\u7c7b\uff0c\u521b\u5efa\u65b0\u7684\u5f15\u7528\u8ba1\u6570 copy ctor \u9012\u589e\u8ba1\u6570\u5668\uff0c\u62f7\u8d1d\u6210\u5458 dtor \u9012\u51cf\u8ba1\u6570\u5668\uff0c\u5982\u679c\u51cf\u4e3a 0 \u5219\u91ca\u653e\u8d44\u6e90 eq= \u9012\u589e\u53f3\u4fa7\u5bf9\u8c61\u8ba1\u6570\u5668\uff0c\u9012\u51cf\u5de6\u4fa7\u8ba1\u6570\u5668\uff0c\u5e76\u5224\u65ad\u5de6\u4fa7\u662f\u5426\u9700\u8981\u9500\u6bc1 example: like a ptr class HasPtr { private : string * ps ; int i ; size_t * use ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ), use ( new size_t ( 1 )) { } HasPtr ( const HasPtr & hp ) : ps ( hp . ps ), i ( hp . i ), use ( hp . use ) { ++* use ; } HasPtr & operator = ( const HasPtr & hp ) { ++* hp . use ; if ( --* use == 0 ) { delete ps ; delete use ; } this -> use = hp . use ; this -> ps = hp . ps ; this -> i = hp . i ; return * this ; } ~ HasPtr () { if ( --* use == 0 ) { delete ps ; delete use ; } } }; \u4f8b: \u8bbe\u8ba1 Message \u23f3 Message \u53ef\u4ee5\u51fa\u73b0\u5728\u591a\u4e2a Folder \u4e2d\uff0c Folder \u4e5f\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Message \uff0c\u4e8c\u8005\u5404\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u6570\u7ec4 \u62f7\u8d1d: \u62f7\u8d1d Message \u7684\u6d88\u606f\u5185\u5bb9\uff0c\u4e14\u4e24\u4e2a\u6d88\u606f\u51fa\u73b0\u5728\u76f8\u540c\u7684 Folder \u4e2d \u6790\u6784: \u786e\u4fdd\u6ca1\u6709 Folder \u4fdd\u5b58\u88ab\u9500\u6bc1\u7684 Message \u6307\u9488 \u79fb\u52a8: \u6ce8\u610f msg->folders.clear() class Message { friend class Folder ; private : std :: string contents ; std :: set < Folder *> folders ; void moveFolders ( Message * msg ) { folders = std :: move ( msg . folders ); // \u4f7f\u7528 set \u7684\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 for ( auto f : folders ) { f . rmvMsg ( msg ); f . addMsg ( this ); } msg -> folders . clear (); // \u8003\u8651 ~Message(), \u786e\u4fdd\u9500\u6bc1 msg \u662f\u65e0\u5bb3\u7684 } public : Message ( const Message & msg ) : contents ( msg . contents ), folders ( msg . folders ) { for ( auto f : msg . folders ) f -> addMsg ( this ); } Message ( Message && msg ) : contents ( std :: move ( msg . contents )) { moveFolders ( & msg ); } ~ Message () { for ( auto f : folders ) f . rmvMsg ( this ); } Message & operator = ( const Message & msg ) { for ( auto f : folders ) f . rmvMsg ( this ); contents = msg . contents ; folders = msg . folders ; for ( auto f : folders ) f . addMsg ( this ); return * this ; } Message & operator = ( Message && msg ) { if ( this != & msg ) { for ( auto f : folders ) f . rmvMsg ( this ); contents = std :: move ( contents ); moveFolders ( & msg ); } return * this ; } void save ( Folder & f ) { folders . insert ( & f ); f . addMsg ( this ); } void remove ( Folder & f ) { folders . erase ( & f ); f . rmvMsg ( this ); } };","title":"copy and destruct"},{"location":"_basis/_copy_control/copy_control1/#1","text":"","title":"1. \u62f7\u8d1d"},{"location":"_basis/_copy_control/copy_control1/#1_1","text":"\u53ef\u89c6\u4e3a\u5355\u53c2\u6784\u9020\u51fd\u6570\u7684\u4e00\u79cd\u7279\u4f8b\uff0c\u53ef\u663e\u5f0f\u8c03\u7528\u4e5f\u53ef\u9690\u5f0f\u8c03\u7528\uff0c(\u51e0\u4e4e\u6ca1\u6709 explicit \u7684\u60c5\u51b5) \u53c2\u6570\u5fc5\u987b\u662f\u5f15\u7528\u7c7b\u578b (\u901a\u5e38\u52a0 const )\u3002\u5426\u5219\uff0c\u4e3a\u4e86\u8c03\u7528\u62f7\u8d1d ctor \u9700\u8981\u62f7\u8d1d\u5b9e\u53c2\uff0c\u800c\u62f7\u8d1d\u5b9e\u53c2\u53c8\u9700\u8981\u8c03\u7528\u62f7\u8d1d ctor \u82e5\u672a\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u9ed8\u8ba4\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c \u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u6240\u6709\u975e static \u6210\u5458\u62f7\u8d1d\u5230\u65b0\u5bf9\u8c61\u4e2d\uff0c\u5bf9\u4e8e\u7c7b\u5bf9\u8c61\u4f1a\u8c03\u7528\u5176\u62f7\u8d1d ctor\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4f1a\u62f7\u8d1d\u6bcf\u4e00\u4e2a\u5355\u5143 class Book { string name ; int nPages ; public : // \u548c\u5408\u6210\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u903b\u8f91\u7b49\u4ef7 Book ( const Book & book ) : name ( book . name ), nPages ( book . nPages ) { } };","title":"(1). \u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"_basis/_copy_control/copy_control1/#2","text":"\u7c7b\u9700\u8981\u63a7\u5236\u5176\u5bf9\u8c61\u5982\u4f55\u8d4b\u503c \u8d4b\u503c\u8fd0\u7b97\u7b26\u5fc5\u987b\u5728\u7c7b\u5185\u91cd\u8f7d\uff0c\u4e3a\u5b9e\u73b0\u53f3\u5411\u5de6\u7684\u8fde\u7eed\u8d4b\u503c\uff0c\u8fd4\u56de\u503c\u662f\u81ea\u8eab\u5f15\u7528 Obj& o = *this; \u82e5\u672a\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\uff0c\u7f16\u8bd1\u5668\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c\uff0c\u9ed8\u8ba4\u884c\u4e3a\u662f\u5c06\u53f3\u4fa7\u8fd0\u7b97\u5bf9\u8c61\u7684\u975e static \u6210\u5458\u8d4b\u503c\u7ed9\u5de6\u4fa7\u5bf9\u8c61\u7684\u6210\u5458 Book & operator = ( const Book & book ) { name = book . name ; nPages = book . nPages ; }","title":"(2). \u8d4b\u503c (\u62f7\u8d1d) \u8fd0\u7b97\u7b26"},{"location":"_basis/_copy_control/copy_control1/#3","text":"\u5373\u4f7f\u4e0d\u5b9a\u4e49\u62f7\u8d1d\u63a7\u5236\u6210\u5458\uff0c\u7f16\u8bd1\u5668\u4ecd\u4f1a\u81ea\u52a8\u751f\u6210\uff0c\u7981\u6b62\u62f7\u8d1d\u9700\u8981 =delete \u663e\u5f0f\u58f0\u660e =delete \u53ef\u4ee5\u5bf9\u4efb\u4f55\u51fd\u6570\u58f0\u660e\uff0c\u901a\u77e5\u7f16\u8bd1\u5668\u4e0d\u5e0c\u671b\u5b9a\u4e49\u8fd9\u4e9b\u6210\u5458 \u5982\u679c\u5bf9\u6790\u6784\u51fd\u6570\u58f0\u660e =delete \uff0c\u7531\u4e8e\u65e0\u6cd5\u6790\u6784\uff0c\u8be5\u5bf9\u8c61\u53ea\u80fd\u7531 new \u521b\u5efa\uff0c\u4e14\u4e0d\u80fd\u88ab delete \u65e7\u7684\u6807\u51c6\u5b9e\u73b0\u963b\u6b62\u62f7\u8d1d\u7684\u65b9\u5f0f\u662f\u58f0\u660e private \u5982\u679c\u4e00\u4e2a\u7c7b\u6709\u6210\u5458\u65e0\u6cd5\u88ab\u9ed8\u8ba4\u6784\u9020\u3001\u62f7\u8d1d\u3001\u8d4b\u503c\u6216\u9500\u6bc1\uff0c\u5bf9\u5e94 \u5408\u6210\u51fd\u6570 \u662f =delete \u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u6790\u6784\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u6709\u4e00\u4e2a\u65e0\u7c7b\u5185\u521d\u59cb\u503c\u7684\u5f15\u7528\u6210\u5458 / \u7c7b\u6709\u4e00\u4e2a\u65e0\u7c7b\u5185\u521d\u59cb\u503c\u4e14\u65e0\u9ed8\u8ba4 ctor \u7684 const \u6210\u5458\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u6784\u9020\u51fd\u6570\u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u6709\u5f15\u7528\u6210\u5458 / \u7c7b\u6709 const \u6210\u5458\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u8d4b\u503c\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 \u5982\u679c \u7c7b\u67d0\u6210\u5458\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684 / \u7c7b\u67d0\u6210\u5458\u7684\u6790\u6784\u51fd\u6570\u662f\u5220\u9664\u7684\u6216\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u90a3\u4e48\u8be5\u7c7b\u7684\u5408\u6210\u62f7\u8d1d ctor \u88ab\u5b9a\u4e49\u4e3a\u5220\u9664\u7684 (?-p451)","title":"(3). \u963b\u6b62\u62f7\u8d1d"},{"location":"_basis/_copy_control/copy_control1/#2_1","text":"\u5bf9\u4e8e\u6790\u6784\u51fd\u6570: \u6790\u6784\u51fd\u6570\u9996\u5148\u6267\u884c\u51fd\u6570\u4f53\uff0c\u7136\u540e\u9690\u5f0f\u5730\u6309\u521d\u59cb\u5316\u7684\u9006\u5e8f\u9500\u6bc1\u6210\u5458\uff0c\u51fd\u6570\u4f53\u5185\u901a\u5e38\u91ca\u653e\u5bf9\u8c61\u5728\u751f\u5b58\u671f\u5185\u5206\u914d\u7684\u6240\u6709\u8d44\u6e90 \u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u65e0\u6cd5\u88ab\u91cd\u8f7d\uff0c\u53ea\u80fd\u6709\u4e00\u4e2a \u82e5\u672a\u5b9a\u4e49\u6790\u6784\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u9ed8\u8ba4\u5b9a\u4e49\u4e00\u4e2a\u5408\u6210\u7248\u672c\uff0c\u5176\u51fd\u6570\u4f53\u4e3a\u7a7a \u4e3a\u4ec0\u4e48\u8981\u9006\u5e8f\u6790\u6784: \u5982\u679c\u987a\u5e8f\u6790\u6784\uff0c\u53ef\u80fd\u5bfc\u81f4\u540e\u9762\u7684\u5143\u7d20\u6301\u6709\u65e0\u6548\u7684\u5f15\u7528\u6216\u6307\u9488 \u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u8c03\u7528\u7684\u65f6\u673a \u6808\u5bf9\u8c61: \u5728\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u9500\u6bc1 \u5806\u5bf9\u8c61: \u5bf9\u5f15\u7528\u5b83\u7684\u6307\u9488 delete \u65f6\u88ab\u9500\u6bc1 \u4e34\u65f6\u5bf9\u8c61: \u521b\u5efa\u5b83\u7684\u5b8c\u6574\u8868\u8fbe\u5f0f\u7ed3\u675f\u65f6\u88ab\u9500\u6bc1 \u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u5176\u6210\u5458\u88ab\u6790\u6784\uff1b\u5bb9\u5668/\u6570\u7ec4\u88ab\u6790\u6784\uff0c\u5176\u5143\u7d20\u88ab\u6790\u6784\u3002","title":"2. \u6790\u6784"},{"location":"_basis/_copy_control/copy_control1/#3_1","text":"\u5047\u8bbe\u9700\u8981\u62f7\u8d1d\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\uff0c\u968f\u540e\u820d\u5f03\u4e34\u65f6\u5bf9\u8c61\u3002\u5982\u679c\u8c03\u7528\u62f7\u8d1d\u51fd\u6570\uff0c\u62f7\u8d1d\u4e34\u65f6\u5bf9\u8c61\u4e2d\u7684\u8d44\u6e90\u4f1a\u9020\u6210\u4e00\u5b9a\u6d6a\u8d39\uff0c\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u63a5\u7ba1\u4e34\u65f6\u5bf9\u8c61\u7684\u8d44\u6e90\uff0c\u53f3\u503c\u5f15\u7528\u5c31\u662f\u4e3a\u79fb\u52a8\u8bed\u4e49\u521b\u9020\u7684\u4e00\u79cd\u6807\u8bb0\u3002","title":"3. \u79fb\u52a8"},{"location":"_basis/_copy_control/copy_control1/#1_2","text":"\u548c\u5de6\u503c\u5f15\u7528\u76f8\u53cd\uff0c\u53f3\u503c\u5f15\u7528\u53ea\u80fd\u7ed1\u5b9a\u5230\u53f3\u503c\u4e0a\uff0c\u53f3\u503c\u5bd3\u4e49\u77ed\u6682 int i = 42 , & r = i ; int && rr = i * 42 ; \u53f3\u503c\u5f15\u7528\u7ed1\u5b9a\u5de6\u503c\uff0c\u9700\u8981 <utility> \u4e2d\u7684 move \u51fd\u6570 int && rr = std :: move ( r );","title":"(1). \u53f3\u503c\u5f15\u7528"},{"location":"_basis/_copy_control/copy_control1/#2_2","text":"\u79fb\u52a8\u6784\u9020\u51fd\u6570\u9700\u8981\u5b8c\u6210: \u63a5\u7ba1\u8d44\u6e90\uff0c\u4ee5\u79fb\u540e\u6e90\u88ab\u9500\u6bc1\u4e3a\u524d\u63d0\uff0c\u8003\u8651\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u6709\u6548 (\u4ee5\u53ca\u5982\u679c\u5176\u4ed6\u6210\u5458\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u7684\u6709\u6548\u6027) \u82e5\u4f20\u5165\u53f3\u503c\u4e14\u672a\u5b9a\u4e49\u79fb\u52a8 ctor\uff0c\u4e5f\u4f1a\u8c03\u7528\u62f7\u8d1d ctor (\u5408\u7406) \u5f53\u4e00\u4e2a\u7c7b\u6ca1\u6709\u5b9a\u4e49\u4efb\u4f55\u62f7\u8d1d\u63a7\u5236\u6210\u5458 (3 \u4e2a)\uff0c\u4e14\u6bcf\u4e2a\u975e static \u6210\u5458\u90fd\u53ef\u79fb\u52a8\uff0c\u7f16\u8bd1\u5668\u624d\u4f1a\u5408\u6210\u79fb\u52a8 ctor\u3001\u79fb\u52a8\u8d4b\u503c Book ( Book && book ) noexcept : rsc ( book . rsc ) { book . rsc = nullptr ; } \u79fb\u52a8\u3001\u6807\u51c6\u5e93\u5bb9\u5668\u548c\u5f02\u5e38 vector \u9700\u8981\u4fdd\u8bc1 push_back \u53d1\u751f\u5f02\u5e38\u65f6\u4fdd\u6301\u4e0d\u53d8\u3002\u8003\u8651 vector \u7684 reallocate \u8fc7\u7a0b\u53ef\u80fd\u7684\u60c5\u51b5: \u82e5\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u65e7\u5143\u7d20\u59cb\u7ec8\u4fdd\u6301\u4e0d\u53d8\uff0c\u82e5\u53d1\u751f\u5f02\u5e38\u5219\u4ea4\u7531\u7528\u6237\u5904\u7406 \u82e5\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u5728\u8fd8\u672a\u79fb\u52a8\u5b8c\u65f6\u53d1\u751f\u5f02\u5e38\u5c31\u4f1a\u4ea7\u751f\u95ee\u9898 \u56e0\u6b64\uff0c\u8981\u60f3\u8ba9 vector \u4f7f\u7528\u79fb\u52a8\u64cd\u4f5c\uff0c\u5b9a\u4e49\u79fb\u52a8 ctor \u7684\u540c\u65f6\u8fd8\u8981\u58f0\u660e noexcept","title":"(2). \u79fb\u52a8\u6784\u9020\u51fd\u6570"},{"location":"_basis/_copy_control/copy_control1/#3_2","text":"\u9700\u8981\u989d\u5916\u8003\u8651\u81ea\u8d4b\u503c Book & operator ( Book && book ) noexcept { if ( this != & book ) { ... } return * this ; }","title":"(3). \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"_basis/_copy_control/copy_control1/#4","text":"","title":"4. \u4e09/\u4e94\u6cd5\u5219"},{"location":"_basis/_copy_control/copy_control1/#_1","text":"\u901a\u5e38\u5bf9\u4e8e\u6790\u6784\u51fd\u6570\u7684\u9700\u6c42\u66f4\u52a0\u660e\u663e\uff0c\u800c\u8981\u662f\u9700\u8981\u6790\u6784\u51fd\u6570\uff0c\u51e0\u4e4e\u4e00\u5b9a\u4f1a\u9700\u8981\u62f7\u8d1d\u548c\u8d4b\u503c\u3002 class HasPtr { string * ps ; int i ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ) {} ~ HasPtr () { delete ps ; } } \u9ed8\u8ba4\u7684\u62f7\u8d1d\u884c\u4e3a\u4f1a\u62f7\u8d1d\u6307\u9488\uff0c\u5728\u6790\u6784\u65f6\u53ef\u80fd\u4f1a delete \u540c\u4e00\u6307\u9488\u591a\u6b21\uff0c\u8fd9\u662f undefined \u7684\u3002","title":"\u9700\u8981\u6790\u6784\u51fd\u6570\u7684\u7c7b\u4e5f\u9700\u8981\u62f7\u8d1d\u548c\u8d4b\u503c\u64cd\u4f5c"},{"location":"_basis/_copy_control/copy_control1/#_2","text":"\u4e3e\u4f8b\uff0c\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u6709\u4e2a\u552f\u4e00 id \u62f7\u8d1d\u65f6\uff0c\u7531\u4e8e\u6784\u9020\u65b0\u5bf9\u8c61\uff0c\u9700\u8981\u8c03\u6574 id \u8d4b\u503c\u65f6\uff0c\u7531\u4e8e\u5bf9\u8c61\u4e0d\u540c\uff0c\u8981\u907f\u514d id \u88ab\u590d\u5236","title":"\u9700\u8981\u62f7\u8d1d\u4e5f\u9700\u8981\u8d4b\u503c\uff0c\u53cd\u4e4b\u4ea6\u7136"},{"location":"_basis/_copy_control/copy_control1/#hasptr","text":"\u8bbe\u8ba1\u7c7b\u7684\u65f6\u5019\uff0c\u786e\u5b9a\u9700\u8981\u6790\u6784\u51fd\u6570\u540e\uff0c\u5f80\u5f80\u9700\u8981\u8003\u8651\u5b83\u7684\u62f7\u8d1d\u8bed\u4e49: \u7c7b\u7684\u884c\u4e3a\u50cf\u503c\uff0c\u6709\u81ea\u5df1\u7684\u72b6\u6001\uff0c\u526f\u672c\u548c\u539f\u5bf9\u8c61\u72ec\u7acb \u7c7b\u7684\u884c\u4e3a\u50cf\u6307\u9488\uff0c\u5171\u4eab\u5e95\u5c42\u6570\u636e","title":"\u4f8b: \u8bbe\u8ba1 HasPtr"},{"location":"_basis/_copy_control/copy_control1/#1_3","text":"copy ctor: \u62f7\u8d1d string \u7684\u503c dtor: \u91ca\u653e string op=: \u91ca\u653e\u5f53\u524d string \uff0c\u4ece\u53f3\u4fa7\u5bf9\u8c61\u62f7\u8d1d string example: like a value class HasPtr { private : string * ps ; int i ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ) { } HasPtr ( const HasPtr & hp ) : ps ( new string ( * hp . ps )), i ( hp . i ) { } HasPtr & operator = ( const HasPtr & hp ) { auto newp = new string ( * hp . ps ); delete ps ; ps = newp ; i = hp . i ; return * this ; } ~ HasPtr () { delete ps ; } }; \u9700\u8981\u989d\u5916\u6ce8\u610f\u8d4b\u503c\u8fd0\u7b97\u7b26\u62f7\u8d1d\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u5982\u679c\u76f4\u63a5\u91ca\u653e\u4e86 ps \u5c31\u4f1a\u51fa\u9519","title":"(1). \u884c\u4e3a\u50cf\u503c\u7684\u7c7b"},{"location":"_basis/_copy_control/copy_control1/#2_3","text":"ctor \u521d\u59cb\u5316\u7c7b\uff0c\u521b\u5efa\u65b0\u7684\u5f15\u7528\u8ba1\u6570 copy ctor \u9012\u589e\u8ba1\u6570\u5668\uff0c\u62f7\u8d1d\u6210\u5458 dtor \u9012\u51cf\u8ba1\u6570\u5668\uff0c\u5982\u679c\u51cf\u4e3a 0 \u5219\u91ca\u653e\u8d44\u6e90 eq= \u9012\u589e\u53f3\u4fa7\u5bf9\u8c61\u8ba1\u6570\u5668\uff0c\u9012\u51cf\u5de6\u4fa7\u8ba1\u6570\u5668\uff0c\u5e76\u5224\u65ad\u5de6\u4fa7\u662f\u5426\u9700\u8981\u9500\u6bc1 example: like a ptr class HasPtr { private : string * ps ; int i ; size_t * use ; public : HasPtr ( const string & s = string ()) : ps ( new string ( s )), i ( 0 ), use ( new size_t ( 1 )) { } HasPtr ( const HasPtr & hp ) : ps ( hp . ps ), i ( hp . i ), use ( hp . use ) { ++* use ; } HasPtr & operator = ( const HasPtr & hp ) { ++* hp . use ; if ( --* use == 0 ) { delete ps ; delete use ; } this -> use = hp . use ; this -> ps = hp . ps ; this -> i = hp . i ; return * this ; } ~ HasPtr () { if ( --* use == 0 ) { delete ps ; delete use ; } } };","title":"(2). \u884c\u4e3a\u50cf\u6307\u9488\u7684\u7c7b"},{"location":"_basis/_copy_control/copy_control1/#message","text":"Message \u53ef\u4ee5\u51fa\u73b0\u5728\u591a\u4e2a Folder \u4e2d\uff0c Folder \u4e5f\u53ef\u4ee5\u5305\u542b\u591a\u4e2a Message \uff0c\u4e8c\u8005\u5404\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\u6570\u7ec4 \u62f7\u8d1d: \u62f7\u8d1d Message \u7684\u6d88\u606f\u5185\u5bb9\uff0c\u4e14\u4e24\u4e2a\u6d88\u606f\u51fa\u73b0\u5728\u76f8\u540c\u7684 Folder \u4e2d \u6790\u6784: \u786e\u4fdd\u6ca1\u6709 Folder \u4fdd\u5b58\u88ab\u9500\u6bc1\u7684 Message \u6307\u9488 \u79fb\u52a8: \u6ce8\u610f msg->folders.clear() class Message { friend class Folder ; private : std :: string contents ; std :: set < Folder *> folders ; void moveFolders ( Message * msg ) { folders = std :: move ( msg . folders ); // \u4f7f\u7528 set \u7684\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 for ( auto f : folders ) { f . rmvMsg ( msg ); f . addMsg ( this ); } msg -> folders . clear (); // \u8003\u8651 ~Message(), \u786e\u4fdd\u9500\u6bc1 msg \u662f\u65e0\u5bb3\u7684 } public : Message ( const Message & msg ) : contents ( msg . contents ), folders ( msg . folders ) { for ( auto f : msg . folders ) f -> addMsg ( this ); } Message ( Message && msg ) : contents ( std :: move ( msg . contents )) { moveFolders ( & msg ); } ~ Message () { for ( auto f : folders ) f . rmvMsg ( this ); } Message & operator = ( const Message & msg ) { for ( auto f : folders ) f . rmvMsg ( this ); contents = msg . contents ; folders = msg . folders ; for ( auto f : folders ) f . addMsg ( this ); return * this ; } Message & operator = ( Message && msg ) { if ( this != & msg ) { for ( auto f : folders ) f . rmvMsg ( this ); contents = std :: move ( contents ); moveFolders ( & msg ); } return * this ; } void save ( Folder & f ) { folders . insert ( & f ); f . addMsg ( this ); } void remove ( Folder & f ) { folders . erase ( & f ); f . rmvMsg ( this ); } };","title":"\u4f8b: \u8bbe\u8ba1 Message"},{"location":"_basis/_copy_control/move/","text":"1. \u503c\u7c7b\u522b \u23f3 C++ \u7684\u8868\u8fbe\u5f0f\u6709\u4e24\u4e2a\u7ef4\u5ea6\u7684\u5c5e\u6027 \u7c7b\u578b (type): \u2002 \u5982 int (\u666e\u901a\u7c7b\u578b) int* \u3001 int& \u3001 int&& (\u590d\u5408\u7c7b\u578b) \u503c\u7c7b\u522b (value category): \u2002 \u5de6\u503c (lvalue)\u3001\u5c06\u4ea1\u503c (eXpiring, xvalue)\u3001\u7eaf\u53f3\u503c (prvalue) \u503c\u7c7b\u522b\u5177\u4f53\u5c55\u5f00\u4e3a \u5de6\u503c: \u53ef\u4ee5\u53d6\u5730\u5740\u7684\u5177\u540d\u53d8\u91cf \u53d8\u91cf\u540d\uff0c\u51fd\u6570\u540d\uff0c\u6570\u636e\u6210\u5458\u5982 std::cin \u7b49 ++i \u662f\u5de6\u503c\uff0c i++ \u662f\u53f3\u503c \u4ea1\u503c: \u62e5\u6709\u8eab\u4efd\u4e14\u53ef\u4ee5\u79fb\u52a8 \u8fd4\u56de\u5bf9\u8c61\u4e3a\u5bf9\u8c61\u7684\u53f3\u503c\u5f15\u7528\u7684\u51fd\u6570\u8c03\u7528 (\u6216\u91cd\u8f7d\u8fd0\u7b97\u7b26)\uff0c\u5982 std::move(x) \u8f6c\u6362\u4e3a\u5bf9\u8c61\u7684\u53f3\u503c\u5f15\u7528\u7684\u8f6c\u578b\u8868\u8fbe\u5f0f\uff0c\u5982 static_cast(x) \u7eaf\u53f3\u503c \u5b57\u9762\u91cf\uff0c this \u6307\u9488\uff0clambda \u8868\u8fbe\u5f0f \u5185\u5efa\u6570\u503c\u8fd0\u7b97\u8868\u8fbe\u5f0f\uff0c\u5982 a+b \uff0c a%b \u7b49 \u5224\u65ad\u7ef4\u5ea6: \u62e5\u6709\u8eab\u4efd: \u2002 \u901a\u8fc7\u67d0\u4e2a\u540d\u5b57\u5224\u65ad\u8868\u8fbe\u5f0f\u4e4b\u95f4\u662f\u5426\u6307\u4ee3\u540c\u4e00\u5b9e\u4f53 \u53ef\u88ab\u79fb\u52a8: \u2002 \u53f3\u503c\u5f15\u7528\u7c7b\u578b\u7684\u5f62\u53c2\u53ef\u4ee5\u7ed1\u5b9a\u4e8e\u8fd9\u4e2a\u8868\u8fbe\u5f0f \u2003 \u8fd9\u6837\u5206\u7c7b\u662f\u4e3a\u4e86\u5f15\u7528\u7684\u7ed1\u5b9a: \u8ba9 xvalue & prvalue \u5728\u51fd\u6570\u91cd\u8f7d\u4e2d\u4f18\u5148\u7ed1\u5b9a\u53f3\u503c\u5f15\u7528\uff0c\u5176\u6b21\u5bfb\u627e\u5e38\u5de6\u503c\u5f15\u7528\uff0c\u4ece\u800c\u6b63\u786e\u53d1\u6325\u79fb\u52a8\u8bed\u4e49\u7684\u4f5c\u7528 \u53f3\u503c\u5f15\u7528\u7684\u7ed1\u5b9a void foo ( int & ) { std :: cout << \"lvalue\" << std :: endl ; } void foo ( int && ) { std :: cout << \"rvalue\" << std :: endl ; } int main () { int && rref = 1 ; foo ( rref ); // output: lvalue } rref : \u2002\u7c7b\u578b\u662f\u53f3\u503c\u5f15\u7528\uff0c\u503c\u7c7b\u522b\u662f\u5de6\u503c\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53f3\u503c 1 2. \u79fb\u52a8 \u23f3 (1). \u79fb\u52a8\u6784\u9020\u51fd\u6570\u3001\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26 \u23f3 \u7f16\u5199\u79fb\u52a8 ctor \u65f6\uff0c\u9700\u8981\u8003\u8651: \u5047\u8bbe\u79fb\u540e\u6e90\u5bf9\u8c61\u4f1a\u88ab\u6790\u6784\uff0c\u66f4\u6539\u5176\u6307\u9488\uff0c\u9632\u6b62\u5f53\u524d\u5bf9\u8c61\u88ab\u5f71\u54cd \u52a0 noexcept \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u9700\u8981\u8003\u8651\u81ea\u8d4b\u503c Book ( Book && book ) noexcept : rsc ( book . rsc ) { book . rsc = nullptr ; } Book & operator ( Book && book ) noexcept { if ( this != & book ) { ... } return * this ; } (2). \u79fb\u52a8\u6210\u5458\u4e0e noexcept \u23f3 \u8003\u8651 vector \u7684 reallocate \u8fc7\u7a0b\uff0c\u5982\u679c\u6269\u5bb9\u65f6\u51fa\u73b0\u5f02\u5e38: \u7533\u8bf7\u7a7a\u95f4\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c vector \u4fdd\u6301\u539f\u6709\u72b6\u6001\uff0c\u5f02\u5e38\u4ea4\u7531\u4e0a\u5c42\u7528\u6237\u5904\u7406 copy \u5143\u7d20\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u6790\u6784\u5df2\u7ecf\u88ab copy \u7684\u5143\u7d20\uff0c vector \u6062\u590d\u4e3a\u539f\u6709\u72b6\u6001\uff0c\u5f02\u5e38\u4ea4\u7531\u7528\u6237 \u800c move \u65f6\u5df2\u88ab move \u7684\u5bf9\u8c61\u4f1a\u88ab\u7834\u574f\uff0c\u6b64\u65f6\u629b\u51fa\u5f02\u5e38\u65e0\u6cd5\u6062\u590d vector \u7684\u72b6\u6001\uff0c\u7a0b\u5e8f\u7406\u5e94\u7ec8\u6b62\uff0c\u56e0\u6b64\u6807\u51c6\u89c4\u5b9a: \u53ea\u6709\u5bf9\u8c61\u7684\u79fb\u52a8\u6210\u5458\u58f0\u660e\u4e86 noexcept \uff0c vector \u5728 reallocate \u65f6\u624d\u4f1a\u8c03\u7528\u5bf9\u8c61\u7684\u79fb\u52a8\u6210\u5458\uff0c\u5982\u679c\u629b\u51fa\u5f02\u5e38\u6839\u636e noexcept \u4f1a\u8c03\u7528 std::terminate() 3. \u79fb\u52a8\u8bed\u4e49\u573a\u666f \u23f3 \u79fb\u52a8\u8bed\u4e49\u7684\u8bed\u6cd5\u57fa\u7840\u5373\u662f \u79fb\u52a8 ctor\u3001\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u548c\u53f3\u503c\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u7684\u7ed1\u5b9a\u673a\u5236\uff0c\u5e26\u6765\u7684\u597d\u5904\u662f\u9769\u547d\u6027\u7684 \u5bf9\u8c61 = \u5bf9\u8c61 \u23f3 vector < string > str_split ( const string & s ); vector < string > v1 = str_split ( \"1,2,3\" ); vector < string > v2 ; v2 = str_split ( \"1,2,3\" ); \u8fd9\u662f\u79fb\u52a8\u8bed\u4e49\u5e26\u6765\u7684\u6700\u76f4\u63a5\u7684\u597d\u5904: prvalue \u672c\u8eab\u5177\u6709\u79fb\u52a8\u8bed\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316 xvalue \u4ee3\u8868\u88ab\u8ba4\u5b9a\u5177\u6709\u79fb\u52a8\u8bed\u4e49\u7684 glvalue\uff0c\u4e5f\u4f18\u5148\u7ed1\u5b9a\u5339\u914d\u53f3\u503c\u5f15\u7528 lvalue \u7167\u5e38 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c vector \u9ed8\u9ed8\u505a\u4e86\u79fb\u52a8\u7684\u4f18\u5316\uff0c\u4f18\u96c5 \u5bf9\u8c61\u5b58\u5165\u5bb9\u5668 \u23f3 void push_back ( const T & value ); void push_back ( T && value ); \u5bb9\u5668\u662f\u503c\u8bed\u4e49\u7684\uff0c\u800c\u79fb\u52a8\u8bed\u4e49\u53ef\u4ee5\u4f18\u5316\u53f3\u503c\u5b58\u5165\u5bb9\u5668 vector \u7684 reallocate \u23f3 \u524d\u9762\u63d0\u5230\u8fc7\uff0c\u79fb\u52a8\u6210\u5458\u82e5\u58f0\u660e\u4e86 noexcept \uff0c vector \u5728 reallocate \u65f6\u4f1a\u8c03\u7528\u5b83\u4eec unique_ptr \u653e\u5165\u5bb9\u5668 \u23f3 unique_ptr \u4e0d\u5141\u8bb8\u590d\u5236\uff0c\u4f7f\u5f97\u5b83\u65e0\u6cd5\u653e\u5165 vector \u4e2d\uff0c\u4e14\u9700\u8981\u79fb\u52a8\u6240\u6709\u6743 auto_ptr \u7528\u62f7\u8d1d ctor \u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49\uff0c\u8fd9\u662f\u5b83\u7684\u5931\u8d25\u4e4b\u5904: (1). \u5e73\u65f6\u9700\u8981\u79fb\u52a8\u65f6\u53ea\u80fd\u8c03\u7528\u62f7\u8d1d\u51fd\u6570\uff0c\u770b\u8d77\u6765\u7591\u60d1 (2). \u5b58\u5165\u5bb9\u5668\u540e\uff0c\u5bf9\u5bb9\u5668\u6392\u5e8f\u4f1a\u9020\u6210\u9519\u8bef \u800c\u901a\u8fc7\u79fb\u52a8\u8bed\u4e49\uff0c unique_ptr \u53ef\u4ee5\u653e\u5728\u5bb9\u5668\u4e2d\uff0c\u9700\u8981\u590d\u5236\u65f6\u5c31\u8c03\u7528 unique_ptr \u7684\u79fb\u52a8\u64cd\u4f5c \u6309\u503c\u4f20\u53c2 \u23f3 class People { public : People ( string name ) : name_ ( move ( name )) { } string name_ ; }; People a ( \"Alice\" ); // move ctor of \"string name\" string bn = \"Bob\" ; People b = bn ; // copy ctor of \"string name\" \u4f20\u53c2\u65f6\u8bed\u4e49\u4e0a\u4f1a\u6709\u4e00\u6b21\u62f7\u8d1d\uff0c\u800c\u5c06\u5176\u6539\u4e3a\u79fb\u52a8 \u63d0\u9ad8\u6548\u7387 shared_ptr \u4f5c\u4e3a\u5b9e\u53c2\u5e76\u4e0d\u5c11\u89c1\uff0c shared_ptr \u7684\u62f7\u8d1d\u9700\u8981\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u4e14\u6d6a\u8d39\uff0c\u663e\u7136\u79fb\u52a8\u66f4\u8f7b\u4fbf\u5408\u9002 \u6309\u503c\u8fd4\u56de \u23f3 vector < string > str_split ( const string & s ) { vector < string > v ; ... return v ; } v \u662f\u6808\u4e0a\u5de6\u503c\u5bf9\u8c61\uff0c\u6807\u51c6\u8981\u6c42\u4f18\u5148\u8c03\u7528\u79fb\u52a8 ctor\uff0c\u7136\u540e\u518d\u8003\u8651\u62f7\u8d1d ctor. \u5176\u597d\u5904\u5728\u4e8e: \u6548\u7387\u95ee\u9898\uff0c\u540c\u4e0a \u5de5\u5382\u51fd\u6570\u5e38\u5e38\u9700\u8981\u8fd4\u56de unique_ptr \uff0c\u800c unique_ptr \u4e0d\u652f\u6301\u62f7\u8d1d unique_ptr < SomeObj > create_obj (...) { return unique_ptr < SomeObj > ( new SomeObj (...)); }","title":"move"},{"location":"_basis/_copy_control/move/#1","text":"C++ \u7684\u8868\u8fbe\u5f0f\u6709\u4e24\u4e2a\u7ef4\u5ea6\u7684\u5c5e\u6027 \u7c7b\u578b (type): \u2002 \u5982 int (\u666e\u901a\u7c7b\u578b) int* \u3001 int& \u3001 int&& (\u590d\u5408\u7c7b\u578b) \u503c\u7c7b\u522b (value category): \u2002 \u5de6\u503c (lvalue)\u3001\u5c06\u4ea1\u503c (eXpiring, xvalue)\u3001\u7eaf\u53f3\u503c (prvalue) \u503c\u7c7b\u522b\u5177\u4f53\u5c55\u5f00\u4e3a \u5de6\u503c: \u53ef\u4ee5\u53d6\u5730\u5740\u7684\u5177\u540d\u53d8\u91cf \u53d8\u91cf\u540d\uff0c\u51fd\u6570\u540d\uff0c\u6570\u636e\u6210\u5458\u5982 std::cin \u7b49 ++i \u662f\u5de6\u503c\uff0c i++ \u662f\u53f3\u503c \u4ea1\u503c: \u62e5\u6709\u8eab\u4efd\u4e14\u53ef\u4ee5\u79fb\u52a8 \u8fd4\u56de\u5bf9\u8c61\u4e3a\u5bf9\u8c61\u7684\u53f3\u503c\u5f15\u7528\u7684\u51fd\u6570\u8c03\u7528 (\u6216\u91cd\u8f7d\u8fd0\u7b97\u7b26)\uff0c\u5982 std::move(x) \u8f6c\u6362\u4e3a\u5bf9\u8c61\u7684\u53f3\u503c\u5f15\u7528\u7684\u8f6c\u578b\u8868\u8fbe\u5f0f\uff0c\u5982 static_cast(x) \u7eaf\u53f3\u503c \u5b57\u9762\u91cf\uff0c this \u6307\u9488\uff0clambda \u8868\u8fbe\u5f0f \u5185\u5efa\u6570\u503c\u8fd0\u7b97\u8868\u8fbe\u5f0f\uff0c\u5982 a+b \uff0c a%b \u7b49 \u5224\u65ad\u7ef4\u5ea6: \u62e5\u6709\u8eab\u4efd: \u2002 \u901a\u8fc7\u67d0\u4e2a\u540d\u5b57\u5224\u65ad\u8868\u8fbe\u5f0f\u4e4b\u95f4\u662f\u5426\u6307\u4ee3\u540c\u4e00\u5b9e\u4f53 \u53ef\u88ab\u79fb\u52a8: \u2002 \u53f3\u503c\u5f15\u7528\u7c7b\u578b\u7684\u5f62\u53c2\u53ef\u4ee5\u7ed1\u5b9a\u4e8e\u8fd9\u4e2a\u8868\u8fbe\u5f0f \u2003 \u8fd9\u6837\u5206\u7c7b\u662f\u4e3a\u4e86\u5f15\u7528\u7684\u7ed1\u5b9a: \u8ba9 xvalue & prvalue \u5728\u51fd\u6570\u91cd\u8f7d\u4e2d\u4f18\u5148\u7ed1\u5b9a\u53f3\u503c\u5f15\u7528\uff0c\u5176\u6b21\u5bfb\u627e\u5e38\u5de6\u503c\u5f15\u7528\uff0c\u4ece\u800c\u6b63\u786e\u53d1\u6325\u79fb\u52a8\u8bed\u4e49\u7684\u4f5c\u7528 \u53f3\u503c\u5f15\u7528\u7684\u7ed1\u5b9a void foo ( int & ) { std :: cout << \"lvalue\" << std :: endl ; } void foo ( int && ) { std :: cout << \"rvalue\" << std :: endl ; } int main () { int && rref = 1 ; foo ( rref ); // output: lvalue } rref : \u2002\u7c7b\u578b\u662f\u53f3\u503c\u5f15\u7528\uff0c\u503c\u7c7b\u522b\u662f\u5de6\u503c\uff0c\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53f3\u503c 1","title":"1. \u503c\u7c7b\u522b"},{"location":"_basis/_copy_control/move/#2","text":"","title":"2. \u79fb\u52a8"},{"location":"_basis/_copy_control/move/#1_1","text":"\u7f16\u5199\u79fb\u52a8 ctor \u65f6\uff0c\u9700\u8981\u8003\u8651: \u5047\u8bbe\u79fb\u540e\u6e90\u5bf9\u8c61\u4f1a\u88ab\u6790\u6784\uff0c\u66f4\u6539\u5176\u6307\u9488\uff0c\u9632\u6b62\u5f53\u524d\u5bf9\u8c61\u88ab\u5f71\u54cd \u52a0 noexcept \u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u9700\u8981\u8003\u8651\u81ea\u8d4b\u503c Book ( Book && book ) noexcept : rsc ( book . rsc ) { book . rsc = nullptr ; } Book & operator ( Book && book ) noexcept { if ( this != & book ) { ... } return * this ; }","title":"(1). \u79fb\u52a8\u6784\u9020\u51fd\u6570\u3001\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26"},{"location":"_basis/_copy_control/move/#2-noexcept","text":"\u8003\u8651 vector \u7684 reallocate \u8fc7\u7a0b\uff0c\u5982\u679c\u6269\u5bb9\u65f6\u51fa\u73b0\u5f02\u5e38: \u7533\u8bf7\u7a7a\u95f4\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c vector \u4fdd\u6301\u539f\u6709\u72b6\u6001\uff0c\u5f02\u5e38\u4ea4\u7531\u4e0a\u5c42\u7528\u6237\u5904\u7406 copy \u5143\u7d20\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u6790\u6784\u5df2\u7ecf\u88ab copy \u7684\u5143\u7d20\uff0c vector \u6062\u590d\u4e3a\u539f\u6709\u72b6\u6001\uff0c\u5f02\u5e38\u4ea4\u7531\u7528\u6237 \u800c move \u65f6\u5df2\u88ab move \u7684\u5bf9\u8c61\u4f1a\u88ab\u7834\u574f\uff0c\u6b64\u65f6\u629b\u51fa\u5f02\u5e38\u65e0\u6cd5\u6062\u590d vector \u7684\u72b6\u6001\uff0c\u7a0b\u5e8f\u7406\u5e94\u7ec8\u6b62\uff0c\u56e0\u6b64\u6807\u51c6\u89c4\u5b9a: \u53ea\u6709\u5bf9\u8c61\u7684\u79fb\u52a8\u6210\u5458\u58f0\u660e\u4e86 noexcept \uff0c vector \u5728 reallocate \u65f6\u624d\u4f1a\u8c03\u7528\u5bf9\u8c61\u7684\u79fb\u52a8\u6210\u5458\uff0c\u5982\u679c\u629b\u51fa\u5f02\u5e38\u6839\u636e noexcept \u4f1a\u8c03\u7528 std::terminate()","title":"(2). \u79fb\u52a8\u6210\u5458\u4e0e noexcept"},{"location":"_basis/_copy_control/move/#3","text":"\u79fb\u52a8\u8bed\u4e49\u7684\u8bed\u6cd5\u57fa\u7840\u5373\u662f \u79fb\u52a8 ctor\u3001\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\u548c\u53f3\u503c\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u7684\u7ed1\u5b9a\u673a\u5236\uff0c\u5e26\u6765\u7684\u597d\u5904\u662f\u9769\u547d\u6027\u7684","title":"3. \u79fb\u52a8\u8bed\u4e49\u573a\u666f"},{"location":"_basis/_copy_control/move/#_1","text":"vector < string > str_split ( const string & s ); vector < string > v1 = str_split ( \"1,2,3\" ); vector < string > v2 ; v2 = str_split ( \"1,2,3\" ); \u8fd9\u662f\u79fb\u52a8\u8bed\u4e49\u5e26\u6765\u7684\u6700\u76f4\u63a5\u7684\u597d\u5904: prvalue \u672c\u8eab\u5177\u6709\u79fb\u52a8\u8bed\u4e49\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316 xvalue \u4ee3\u8868\u88ab\u8ba4\u5b9a\u5177\u6709\u79fb\u52a8\u8bed\u4e49\u7684 glvalue\uff0c\u4e5f\u4f18\u5148\u7ed1\u5b9a\u5339\u914d\u53f3\u503c\u5f15\u7528 lvalue \u7167\u5e38 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c vector \u9ed8\u9ed8\u505a\u4e86\u79fb\u52a8\u7684\u4f18\u5316\uff0c\u4f18\u96c5","title":"\u5bf9\u8c61 = \u5bf9\u8c61"},{"location":"_basis/_copy_control/move/#_2","text":"void push_back ( const T & value ); void push_back ( T && value ); \u5bb9\u5668\u662f\u503c\u8bed\u4e49\u7684\uff0c\u800c\u79fb\u52a8\u8bed\u4e49\u53ef\u4ee5\u4f18\u5316\u53f3\u503c\u5b58\u5165\u5bb9\u5668","title":"\u5bf9\u8c61\u5b58\u5165\u5bb9\u5668"},{"location":"_basis/_copy_control/move/#vector-reallocate","text":"\u524d\u9762\u63d0\u5230\u8fc7\uff0c\u79fb\u52a8\u6210\u5458\u82e5\u58f0\u660e\u4e86 noexcept \uff0c vector \u5728 reallocate \u65f6\u4f1a\u8c03\u7528\u5b83\u4eec","title":"vector \u7684 reallocate"},{"location":"_basis/_copy_control/move/#unique_ptr","text":"unique_ptr \u4e0d\u5141\u8bb8\u590d\u5236\uff0c\u4f7f\u5f97\u5b83\u65e0\u6cd5\u653e\u5165 vector \u4e2d\uff0c\u4e14\u9700\u8981\u79fb\u52a8\u6240\u6709\u6743 auto_ptr \u7528\u62f7\u8d1d ctor \u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49\uff0c\u8fd9\u662f\u5b83\u7684\u5931\u8d25\u4e4b\u5904: (1). \u5e73\u65f6\u9700\u8981\u79fb\u52a8\u65f6\u53ea\u80fd\u8c03\u7528\u62f7\u8d1d\u51fd\u6570\uff0c\u770b\u8d77\u6765\u7591\u60d1 (2). \u5b58\u5165\u5bb9\u5668\u540e\uff0c\u5bf9\u5bb9\u5668\u6392\u5e8f\u4f1a\u9020\u6210\u9519\u8bef \u800c\u901a\u8fc7\u79fb\u52a8\u8bed\u4e49\uff0c unique_ptr \u53ef\u4ee5\u653e\u5728\u5bb9\u5668\u4e2d\uff0c\u9700\u8981\u590d\u5236\u65f6\u5c31\u8c03\u7528 unique_ptr \u7684\u79fb\u52a8\u64cd\u4f5c","title":"unique_ptr \u653e\u5165\u5bb9\u5668"},{"location":"_basis/_copy_control/move/#_3","text":"class People { public : People ( string name ) : name_ ( move ( name )) { } string name_ ; }; People a ( \"Alice\" ); // move ctor of \"string name\" string bn = \"Bob\" ; People b = bn ; // copy ctor of \"string name\" \u4f20\u53c2\u65f6\u8bed\u4e49\u4e0a\u4f1a\u6709\u4e00\u6b21\u62f7\u8d1d\uff0c\u800c\u5c06\u5176\u6539\u4e3a\u79fb\u52a8 \u63d0\u9ad8\u6548\u7387 shared_ptr \u4f5c\u4e3a\u5b9e\u53c2\u5e76\u4e0d\u5c11\u89c1\uff0c shared_ptr \u7684\u62f7\u8d1d\u9700\u8981\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u4e14\u6d6a\u8d39\uff0c\u663e\u7136\u79fb\u52a8\u66f4\u8f7b\u4fbf\u5408\u9002","title":"\u6309\u503c\u4f20\u53c2"},{"location":"_basis/_copy_control/move/#_4","text":"vector < string > str_split ( const string & s ) { vector < string > v ; ... return v ; } v \u662f\u6808\u4e0a\u5de6\u503c\u5bf9\u8c61\uff0c\u6807\u51c6\u8981\u6c42\u4f18\u5148\u8c03\u7528\u79fb\u52a8 ctor\uff0c\u7136\u540e\u518d\u8003\u8651\u62f7\u8d1d ctor. \u5176\u597d\u5904\u5728\u4e8e: \u6548\u7387\u95ee\u9898\uff0c\u540c\u4e0a \u5de5\u5382\u51fd\u6570\u5e38\u5e38\u9700\u8981\u8fd4\u56de unique_ptr \uff0c\u800c unique_ptr \u4e0d\u652f\u6301\u62f7\u8d1d unique_ptr < SomeObj > create_obj (...) { return unique_ptr < SomeObj > ( new SomeObj (...)); }","title":"\u6309\u503c\u8fd4\u56de"},{"location":"_basis/_misc/rvo_nrvo/","text":"Example \u23f3 class BigObject { ... }; BigObject test1 () { return BigObject ( param ); } BigObject test2 () { BigObject obj ( param ); return obj ; } int main () { BigObject o1 = test1 (); BigObject o2 = test2 (); } \u901a\u5e38\u60c5\u51b5\uff0c\u7c7b\u4f3c\u666e\u901a\u53d8\u91cf\u901a\u8fc7 %rax \u5b9e\u73b0\u8fd4\u56de\u503c\u7684\u65b9\u5f0f test1 : \u2002 \u5c06\u4e34\u65f6\u5bf9\u8c61\u62f7\u8d1d\u5230\u67d0\u5904\uff0c\u518d\u62f7\u8d1d\u5230 o1 test2 : \u2002 \u5c06\u6709\u540d\u5bf9\u8c61 obj \u62f7\u8d1d\u5230\u67d0\u5904\uff0c\u518d\u62f7\u8d1d\u5230 o2 \u62f7\u8d1d\u5230\u7684\u4e2d\u8f6c\u533a\u53ef\u4ee5\u63d0\u524d\u5728\u672a\u8c03\u7528\u51fd\u6570\u65f6\u63d0\u524d\u5f00\u4e00\u5757\u533a\u57df\u5b9e\u73b0\u3002 RVO \u23f3 \u5bf9\u4e8e test1 \uff0c\u4e34\u65f6\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316\u6389\uff0c\u7701\u6389\u4e24\u6b21 copy // \u4f2a\u4ee3\u7801 void test1 ( BigObject & r ) { r . BigObject :: BigObject ( param ); return ; } void main () { BigObject o1 ; // \u8fd9\u91cc\u53ea\u5b9a\u4e49\uff0c\u4e0d\u6784\u9020 test1 ( o1 ); } \u5bf9\u4e8e test2 \uff0c\u7531\u4e8e\u8fd4\u56de\u7684\u662f\u201c\u5177\u540d\u5bf9\u8c61\u201d\uff0c\u60c5\u51b5\u66f4\u590d\u6742\uff0c\u4f18\u5316\u6761\u4ef6\u66f4\u82db\u523b\uff0cRVO \u53ea\u4f18\u5316\u6389\u4e00\u6b21 copy void test2 ( BigObject & r ) { BigObject obj ( param ); r . BigObject :: BigOBject ( obj ); return ; } // main \u548c\u4e0a\u9762\u7c7b\u4f3c NRVO \u23f3 \u7531\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\u6bd4\u8f83\u7b80\u5355\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5e94\u7528 NRVO (g++ \u9ed8\u8ba4\u5f00\u542f NRVO) void test2 ( BigObject & r ) { r . BigObject :: BigObject ( param ); return ; } \u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5 NRVO \u65e0\u6cd5\u5e94\u7528\uff0c\u4f8b\u5982 \u6709\u591a\u4e2a return path\uff0c\u4e14\u4e0d\u540c\u8def\u5f84\u8fd4\u56de\u4e0d\u540c\u540d\u7684\u53d8\u91cf ... here","title":"copy elision &#58; rvo/nrvo"},{"location":"_basis/_misc/rvo_nrvo/#example","text":"class BigObject { ... }; BigObject test1 () { return BigObject ( param ); } BigObject test2 () { BigObject obj ( param ); return obj ; } int main () { BigObject o1 = test1 (); BigObject o2 = test2 (); } \u901a\u5e38\u60c5\u51b5\uff0c\u7c7b\u4f3c\u666e\u901a\u53d8\u91cf\u901a\u8fc7 %rax \u5b9e\u73b0\u8fd4\u56de\u503c\u7684\u65b9\u5f0f test1 : \u2002 \u5c06\u4e34\u65f6\u5bf9\u8c61\u62f7\u8d1d\u5230\u67d0\u5904\uff0c\u518d\u62f7\u8d1d\u5230 o1 test2 : \u2002 \u5c06\u6709\u540d\u5bf9\u8c61 obj \u62f7\u8d1d\u5230\u67d0\u5904\uff0c\u518d\u62f7\u8d1d\u5230 o2 \u62f7\u8d1d\u5230\u7684\u4e2d\u8f6c\u533a\u53ef\u4ee5\u63d0\u524d\u5728\u672a\u8c03\u7528\u51fd\u6570\u65f6\u63d0\u524d\u5f00\u4e00\u5757\u533a\u57df\u5b9e\u73b0\u3002","title":"Example"},{"location":"_basis/_misc/rvo_nrvo/#rvo","text":"\u5bf9\u4e8e test1 \uff0c\u4e34\u65f6\u5bf9\u8c61\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316\u6389\uff0c\u7701\u6389\u4e24\u6b21 copy // \u4f2a\u4ee3\u7801 void test1 ( BigObject & r ) { r . BigObject :: BigObject ( param ); return ; } void main () { BigObject o1 ; // \u8fd9\u91cc\u53ea\u5b9a\u4e49\uff0c\u4e0d\u6784\u9020 test1 ( o1 ); } \u5bf9\u4e8e test2 \uff0c\u7531\u4e8e\u8fd4\u56de\u7684\u662f\u201c\u5177\u540d\u5bf9\u8c61\u201d\uff0c\u60c5\u51b5\u66f4\u590d\u6742\uff0c\u4f18\u5316\u6761\u4ef6\u66f4\u82db\u523b\uff0cRVO \u53ea\u4f18\u5316\u6389\u4e00\u6b21 copy void test2 ( BigObject & r ) { BigObject obj ( param ); r . BigObject :: BigOBject ( obj ); return ; } // main \u548c\u4e0a\u9762\u7c7b\u4f3c","title":"RVO"},{"location":"_basis/_misc/rvo_nrvo/#nrvo","text":"\u7531\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\u6bd4\u8f83\u7b80\u5355\uff0c\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5e94\u7528 NRVO (g++ \u9ed8\u8ba4\u5f00\u542f NRVO) void test2 ( BigObject & r ) { r . BigObject :: BigObject ( param ); return ; } \u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5 NRVO \u65e0\u6cd5\u5e94\u7528\uff0c\u4f8b\u5982 \u6709\u591a\u4e2a return path\uff0c\u4e14\u4e0d\u540c\u8def\u5f84\u8fd4\u56de\u4e0d\u540c\u540d\u7684\u53d8\u91cf ... here","title":"NRVO"},{"location":"_basis/_oop/a/","text":"1. \u7ee7\u627f \u23f3 \u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u5916\u4e00\u4e2a\u7c7b\uff0c\u53ef\u80fd\u51fa\u4e8e: \u5b9e\u73b0\u7ee7\u627f: \u2002 \u9700\u8981\u590d\u7528\u57fa\u7c7b\u7684\u53d8\u91cf\u4e0e\u65b9\u6cd5\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u518d\u5b9a\u4e49\u81ea\u5df1\u7684\u65b0\u4e1c\u897f \u5b50\u7c7b\u7684\u4ee3\u7801\u6563\u6b65\u5728\u4e24\u4e2a\u7c7b\u4e2d\uff0c\u589e\u52a0\u8026\u5408\uff1b\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f \u63a5\u53e3\u7ee7\u627f (\u5b50\u7c7b\u578b\u591a\u6001): \u2002 \u9700\u8981\u5411\u4e0a\u8f6c\u578b\u4e0e\u52a8\u6001\u7ed1\u5b9a (1). \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570 \u23f3 \u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u9075\u5faa: \u5148\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u5668\uff0c\u518d\u521d\u59cb\u5316\u81ea\u5df1\u7684\u90e8\u5206 C++ \u4e2d\u5728\u521d\u59cb\u8868\u5904\u8c03\u7528\u57fa\u7c7b\u7684 ctor \u5373\u53ef\uff0c\u5982\u679c\u6ca1\u8c03\u7528\u5c31\u5bf9\u57fa\u7c7b\u6210\u5458\u6267\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u3002 cpp impl class Book { std :: string isbn ; public : Book ( const std :: string & isbn ) : isbn ( isbn ) { } }; class Fiction : public Book { int price ; public : Fiction ( const std :: string & isbn , int price ) : Book ( isbn ), price ( price ) { } // \u987a\u5e8f\u4e0d\u540c\u4e5f\u884c } (2). \u7ee7\u627f\u4e0e\u8bbf\u95ee\u63a7\u5236 \u23f3 C++ \u4e2d\uff0c\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u7684\u57fa\u7c7b\u5b50\u5bf9\u8c61\u90e8\u5206\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u53d7\u4e24\u4e2a\u56e0\u7d20\u5f71\u54cd: \u57fa\u7c7b\u4e2d\u8be5\u6210\u5458\u7684\u8bbf\u95ee\u8bf4\u660e\u7b26 \u6d3e\u751f\u7c7b\u7684\u6d3e\u751f\u5217\u8868\u4e2d\u7684\u8bbf\u95ee\u8bf4\u660e\u7b26 ( class \u9ed8\u8ba4\u79c1\u6709\u7ee7\u627f\uff0c struct \u9ed8\u8ba4\u516c\u6709) \u79c1\u6709\u7ee7\u627f/\u4fdd\u62a4\u7ee7\u627f\u4f1a\u5bfc\u81f4 (\u6ce8: \u6d3e\u751f\u8bbf\u95ee\u8bf4\u660e\u7b26\u53ea\u5f71\u54cd\u5bf9\u8c61\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u7c7b\u8be5\u662f\u4ec0\u4e48\u8fd8\u662f\u4ec0\u4e48): \u5bf9\u6d3e\u751f\u5bf9\u8c61\u7684\u57fa\u7c7b\u5b50\u5bf9\u8c61\u6210\u5458\u7684\u8bbf\u95ee\u53d7\u9650 \u6d3e\u751f\u7c7b\u5bf9\u8c61\u65e0\u6cd5\u5411\u4e0a\u8f6c\u578b \u79c1\u6709\u7ee7\u627f\u7684\u573a\u666f: e.g.1 \u2002 \u5b9e\u73b0\u67d0\u4e2a\u7c7b\u65f6\u53ea\u9700\u8981\u53e6\u4e00\u4e2a\u7c7b\u7684\u67d0\u4e9b\u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u7ee7\u627f\u5173\u7cfb class Timer { public : virtual void timeout () { ... } }; class Widget : private Timer { public : virtual void timeout () { Timer :: timeout (); doSomething (); } }; e.g.1 \u63cf\u8ff0\u7684\u662f\u573a\u666f\u7528\u7ec4\u5408\u5b9e\u73b0\u66f4\u4e3a\u5408\u9002\uff0c\u79c1\u6709\u7ee7\u627f\u5e38\u7528\u4e8e\u7a7a\u57fa\u7c7b\u4f18\u5316\u4e2d\u3002 e.g.2 \u2002 \u7a7a\u57fa\u7c7b\u4f18\u5316 (EBO) class MyAllocator { void method1 (); void method2 (); }; class MyVector : private MyAllocator { ... }; \u4e3a\u4fdd\u8bc1\u540c\u4e00\u7c7b\u578b\u7684\u4e0d\u540c\u5bf9\u8c61\u5730\u5740\u59cb\u7ec8\u6709\u522b\uff0c\u4efb\u4f55\u5bf9\u8c61\u7684\u5927\u5c0f\u81f3\u5c11\u4e3a 1 (\u5373\u4f7f\u4e3a\u7a7a)\uff0c\u4f46\u57fa\u7c7b\u5b50\u5bf9\u8c61\u4e0d\u53d7\u5236\u7ea6\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d: MyVector \u9700\u8981 MyAllocator \u7684\u65b9\u6cd5\uff0c\u4f46\u5b9e\u73b0\u4e3a\u7ec4\u5408\u4f1a\u6d6a\u8d39\u7a7a\u95f4 \u76f4\u63a5 public \u7ee7\u627f\u4f1a\u4f7f\u5f97 MyVector \u53ef\u4ee5\u8f6c\u578b\u4e3a MyAllocator \uff0c\u5e76\u4e0d\u5408\u9002 (3). \u5176\u4ed6\u96f6\u788e \u23f3 \u4e00\u65e6\u57fa\u7c7b\u6807\u8bb0\u4e86\u67d0\u51fd\u6570\u662f virtual \uff0c\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u8be5\u51fd\u6570\u90fd\u662f\u865a\u51fd\u6570\uff0c\u65e0\u9700\u518d\u52a0 virtual override \u6709\u52a9\u4e8e\u68c0\u67e5\u91cd\u5199\u7684\u4eba\u5de5\u9519\u8bef (\u5f62\u53c2\u5217\u8868\u540e/\u5f15\u7528\u9650\u5b9a\u7b26\u540e/const \u540e) \u5b50\u7c7b\u578b\u591a\u6001\u6709\u65f6\u9700\u8981\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 static_cast \u6216 dynamic_cast \u5bf9\u8c61\u4e4b\u95f4\u4e0d\u5b58\u5728\u7c7b\u578b\u8f6c\u6362\uff0c\u53ea\u6709\u62f7\u8d1d ( Derived d ): Base b(d) : \u2002 \u8c03\u7528 Base::Base(const Base&) b = d : \u2002 \u8c03\u7528 Base::operator=(const Base&) final \u5173\u952e\u5b57: \u4fee\u9970\u7c7b class Base final {}; \u7981\u6b62\u8be5\u7c7b\u88ab\u7ee7\u627f \u4fee\u9970\u51fd\u6570 void func() const final; \u7981\u6b62\u8be5\u51fd\u6570\u88ab\u8986\u76d6 \u4fee\u9970\u865a\u51fd\u6570 void func() override final; \uff0c\u4fee\u9970\u6d3e\u751f\u7c7b\u7684\u65f6\u5019\u6709\u7528\uff0c\u610f\u56fe\u4f7f\u8986\u76d6\u5230\u6b64\u4e3a\u6b62 2. \u7ed1\u5b9a \u23f3 \u6d3e\u751f\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u5047\u8bbe\u4e3a\u591a\u4e2a\u5b50\u5bf9\u8c61\u7684\u7ebf\u6027\u6392\u5217\uff0c\u4f46\u53d8\u91cf\u540d/\u51fd\u6570\u540d\u7684\u8bbf\u95ee\u662f\u6309\u4f5c\u7528\u57df\u89c4\u5219\u5d4c\u5957\u7684\uff0c\u5bf9\u5f62\u5982 obj.xxname \u7684\u8bed\u53e5\uff0c\u9700\u8981\u5c06 xxname \u7ed1\u5b9a\u5230\u67d0\u4e2a\u5b50\u5bf9\u8c61\u7684\u6210\u5458\uff0c\u6b64\u5373\u4e3a\u7ed1\u5b9a (\u8d77\u70b9 + \u4f5c\u7528\u57df). \u5224\u65ad\u662f\u4ec0\u4e48\u7ed1\u5b9a class Fu { public : std :: string name = \"\u7236\u53d8\u91cf\" ; void show () { cout << this -> name << endl ; cout << this -> func () << endl ; } virtual std :: string func () { cout << this -> name << endl ; return \"\u7236\u7c7b\u8c03\u7528\" ; } }; class Zi : public Fu { public : std :: string name = \"\u5b50\u53d8\u91cf\" ; std :: string func () { cout << this -> name << endl ; return \"\u5b50\u7c7b\u8c03\u7528\" ; } }; int main () { Zi zi ; Fu & fu = zi ; cout << fu . name << endl ; cout << fu . func () << endl ; fu . show (); } // \u7236\u53d8\u91cf \u5b50\u53d8\u91cf \u5b50\u7c7b\u8c03\u7528 \u7236\u53d8\u91cf \u5b50\u53d8\u91cf \u5b50\u7c7b\u8c03\u7528 (1). \u9759\u6001\u7ed1\u5b9a & \u52a8\u6001\u7ed1\u5b9a \u23f3 \u9759\u6001\u7ed1\u5b9a \u2014\u2014 \u4ece\u9759\u6001\u7c7b\u578b\u5f00\u59cb\u7684\u540d\u5b57\u67e5\u627e \u4ece\u53d8\u91cf\u7684 \u9759\u6001\u7c7b\u578b \u51fa\u53d1\uff0c\u5411\u5916\u5c42\u4f5c\u7528\u57df\u5bfb\u627e\u8be5\u540d\u5b57\u7684\u5b9a\u4e49\u5728\u54ea \u627e\u5230\u540e\uff0c\u5982\u679c\u662f\u51fd\u6570\u540d\uff0c\u8fd8\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5 (\u4e0d\u901a\u8fc7\u5c31\u62a5\u9519) \u82e5 name \u662f\u865a\u51fd\u6570\u540d\u4e14 obj \u662f\u5f15\u7528/\u6307\u9488\uff0c\u8fd0\u884c\u65f6\u6267\u884c\u52a8\u6001\u7ed1\u5b9a \u2014\u2014 \u4ece\u52a8\u6001\u7c7b\u578b\u5f00\u59cb\u7684\u540d\u5b57\u67e5\u627e \u4ece\u53d8\u91cf\u7684 \u52a8\u6001\u7c7b\u578b \u51fa\u53d1\uff0c\u5411\u5916\u5c42\u4f5c\u7528\u57df\u5bfb\u627e\u540d\u5b57\u5b9a\u4e49 \u4e8c\u8005\u5bf9\u6bd4: \u540d\u5b57\u67e5\u627e\u7684\u903b\u8f91\u4e00\u6837\u4f46\u5b9e\u73b0\u4e0d\u540c\uff0c\u9759\u6001\u7ed1\u5b9a\u7f16\u8bd1\u671f\u8fdb\u884c\uff0c\u52a8\u6001\u7ed1\u5b9a\u5728\u8fd0\u884c\u65f6\u67e5\u627e\u7c7b\u7684\u865a\u8868\u5b9e\u73b0 \u52a8\u6001\u7ed1\u5b9a\u7684\u5177\u4f53\u5b9e\u73b0 class A { class B : public A { class C : public B { public : public : public : virtual void vfunc1 (); virtual void vfunc1 (); virtual void vfunc2 (); virtual void vfunc2 (); void func1 (); void func2 (); void func1 (); void func2 (); private : private : private : int m_data1 , m_data2 ; int mdata_3 ; int m_data1 ; }; }; \u6bcf\u4e2a\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u90fd\u6709\u4e00\u4e2a\u865a\u8868 (\u6307\u9488\u6570\u7ec4)\uff0c\u5176\u4e2d\u4fdd\u5b58\u51fd\u6570\u6307\u9488\uff0c\u6ce8\u610f\u865a\u8868\u662f\u5c5e\u4e8e\u7c7b\u7684 \u865a\u8868\u7ed9\u51fa\u4e86\u8be5\u7c7b\u7684\u865a\u51fd\u6570\u540d\u5b57\u7ed1\u5b9a\u5230\u54ea\u4e2a\u5b9e\u4f8b\u4e0a\uff0c\u8fd9\u4e9b\u5728\u7f16\u8bd1\u65f6\u53ef\u4ee5\u786e\u5b9a \u7f16\u8bd1\u5668\u5728\u7c7b\u4e2d\u521b\u5efa\u4e00\u4e2a\u865a\u8868\u6307\u9488 vptr \uff0c\u4f7f\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u5316\u65f6\u5305\u542b\u865a\u8868\u6307\u9488 \u2003\u2003 \u7531\u6b64\u53ef\u89c1\uff0c\u865a\u51fd\u6570\u7684\u4ee3\u4ef7\u5728\u4e8e\u9700\u8981\u989d\u5916\u7a7a\u95f4\uff0c\u4e14\u8fd0\u884c\u65f6\u9700\u8981\u989d\u5916\u65f6\u95f4\u8fdb\u884c\u540d\u5b57\u67e5\u627e (2). \u51fd\u6570\u91cd\u8f7d & \u9759\u6001\u7ed1\u5b9a \u23f3 \u7f16\u8bd1\u65f6\u300c\u5148\u9759\u6001\u7ed1\u5b9a\u518d\u7c7b\u578b\u68c0\u67e5\u300d\uff0c\u53ef\u80fd\u5bfc\u81f4\u6d3e\u751f\u7c7b\u51fd\u6570\u540d\u9519\u8bef\u5730\u906e\u853d\u4e86\u57fa\u7c7b\u7684\u51fd\u6570\u540d \u52a8\u6001\u7ed1\u5b9a\u76f8\u5f53\u4e8e\u628a\u91cd\u8f7d\u51fd\u6570\u89c6\u4e3a\u4e0d\u540c\u51fd\u6570\uff0c\u8fd9\u4e5f\u662f\u4e8c\u8005\u540d\u5b57\u67e5\u627e\u8fc7\u7a0b\u7684\u533a\u522b\u4e4b\u4e00 e.g.1 \u2002\u6d3e\u751f\u7c7b\u60f3\u589e\u52a0\u4e00\u4e2a\u65b0\u91cd\u8f7d \u6d3e\u751f\u7c7b\u589e\u52a0\u65b0\u91cd\u8f7d\u4f7f\u5bf9 f \u7684\u67e5\u627e\u5361\u5728 derived \uff0c\u9020\u6210\u7c7b\u578b\u68c0\u67e5\u9519\u8bef struct Base { void f ( int ) { cout << \"Base 1xint\" << endl ;} }; struct Derived : public Base { void f ( int , int , int ) { cout << \"Derived 3xint\" << endl ; } }; int main { Derived d ; d . f ( 1 ); // error } e.g.2 \u2002 \u6d3e\u751f\u7c7b\u53ea\u60f3\u91cd\u5199\u4e00\u90e8\u5206\u7236\u7c7b\u7684\u91cd\u8f7d\u51fd\u6570 \u6d3e\u751f\u5bf9\u8c61\u8981\u60f3\u8bbf\u95ee\u7236\u5bf9\u8c61\u7684\u5168\u90e8\u91cd\u8f7d\u51fd\u6570 \u8981\u4e48\u4e00\u4e2a\u4e5f\u4e0d\u91cd\u5199\uff0c\u540d\u5b57\u67e5\u627e\u8fc7\u7a0b\u4f1a\u81ea\u52a8\u5230\u7236\u7c7b\u7684\u4f5c\u7528\u57df \u8981\u4e48\u5168\u90e8\u91cd\u5199 \u800c\u53ea\u60f3\u91cd\u5199\u4e00\u90e8\u5206\u5c31\u4f1a\u5bfc\u81f4\u53e6\u4e00\u90e8\u5206\u65e0\u6cd5\u8bbf\u95ee\u3002 struct Base { virtual f ( int ) { cout << \"Base 1xint\" << endl ; } virtual f ( int , int ) { cout << \"Base 2xint\" << endl ; } }; struct Derived : public Base { virtual f ( int , int ) { cout << \"Derived 2xint\" << endl ; } }; int main { Derived * d ; Base * b = d ; b -> f ( 1 ); // correct d -> f ( 1 ); // compile error } \u5728 Derived \u4e2d\u58f0\u660e\u4e00\u4e2a using Base::f; \uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u7684\u51fd\u6570\u4f1a\u8f6c\u800c\u8bbf\u95ee\u8fd9\u4e2a using \u58f0\u660e\u70b9\u3002 (3). \u4f5c\u7528\u57df\u8fd0\u7b97\u7b26 \u23f3 \u901a\u8fc7 derived->Base::func() \u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\uff1a \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u6216\u51fd\u6570 \u56de\u907f\u52a8\u6001\u7ed1\u5b9a e.g.1 \u2002 \u540d\u5b57\u51b2\u7a81\u65f6\uff0c\u4f7f\u7528\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u8bbf\u95ee\u9690\u85cf\u6210\u5458 struct Base { int mem = 0 ; }; struct Derived : Base { int mem = 100 ; int getMem () { return Base :: mem ; } }; e.g.2 \u2002 \u56de\u907f\u52a8\u6001\u7ed1\u5b9a struct Base { virtual void func () { } }; struct Derived : public Base { void func () { this -> Base :: func (); doSomething (); } }; int main { Base * b = new Derived (); b -> func (); } (4). \u865a\u6807\u8bb0\u7684\u610f\u4e49 \u23f3 \u8003\u8651\u666e\u901a\u8c03\u7528 d->func() \u548c\u591a\u6001\u8c03\u7528 b->func() \u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u53d6\u52a8\u6001\u7c7b\u578b\uff0c\u8981\u60f3\u83b7\u53d6\u52a8\u6001\u7c7b\u578b\u5fc5\u987b\u4ed8\u51fa\u4ee3\u4ef7 \u5e0c\u671b\u666e\u901a\u8c03\u7528\u4e0d\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u800c\u53ea\u6709\u591a\u6001\u8c03\u7528\u4ed8\u51fa\u8fd0\u884c\u65f6\u7684\u4ee3\u4ef7 \u56e0\u6b64\u5f15\u5165\u4e86 virtual \u6807\u8bb0\uff0c\u8868\u660e\u865a\u51fd\u6570\u662f\u300c\u9700\u8981\u591a\u6001\u8c03\u7528\u7684\u51fd\u6570\u300d \u4e3a\u4ec0\u4e48\u786e\u5b9a\u52a8\u6001\u7c7b\u578b\u8981\u63a8\u5230\u8fd0\u884c\u65f6? \u63a5\u53e3\u7ee7\u627f/\u5b50\u7c7b\u578b\u591a\u6001/\u5411\u4e0a\u8f6c\u578b/\u52a8\u6001\u7ed1\u5b9a\uff0c\u5747\u6307 oop \u4e2d\u7684\u4ee5\u4e0b\u573a\u666f: class Base { ... }; class Derived : public Base { ... }; ... Derived derived Base & base = derived ; base . func (); base \u7684\u9759\u6001\u7c7b\u578b\u662f Base \uff0c\u52a8\u6001\u7c7b\u578b (\u5b9e\u9645\u7ed1\u5b9a\u7684\u7c7b\u578b) \u662f Derived \uff0c\u9700\u8981\u6ce8\u610f \u7f16\u8bd1\u65f6\u672a\u5fc5\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u52a8\u6001\u7c7b\u578b \u628a derived \u7684 func() \u7ed1\u5b9a\u5230 base \u4e0a\u5fc5\u987b\u63a8\u5230\u8fd0\u884c\u65f6 \u8fd9\u6837\u8bbe\u8ba1\u4f1a\u5f15\u5165\u201c\u975e\u865a\u51fd\u6570\u4f7f\u7528\u591a\u6001\u8c03\u7528\u201d\u8fd9\u79cd\u8bed\u6cd5\u6b63\u786e\u7684\u9519\u8bef\u884c\u4e3a\uff0c\u8fd9\u4e5f\u7b26\u5408 C++ \u300c\u76f8\u4fe1\u7a0b\u5e8f\u5458\uff0c\u63d0\u4f9b\u7075\u6d3b\u6027\u300d\u7684\u5b97\u65e8 virtual non-virtual \u666e\u901a\u8c03\u7528 \u9759\u6001\u7c7b\u578b\u52a8\u6001\u7c7b\u578b\u4e00\u81f4\uff0c\u6d6a\u8d39 \u591a\u6001\u8c03\u7528 \u4f5c\u7528\u57df\u8986\u76d6\uff0c\u901a\u5e38\u662f\u5fd8\u52a0\u4e86 3. \u62bd\u8c61\u7c7b\u548c\u63a5\u53e3 \u23f3 \u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u662f\u66f4\u52a0\u503e\u5411\u63a5\u53e3\u7ee7\u627f\u7684\u57fa\u7c7b\uff0c\u5f52\u4e00\u5316\u5171\u540c\u7684\u884c\u4e3a\uff0c\u820d\u5f03\u590d\u7528\u7684\u8026\u5408 \u62bd\u8c61\u7c7b: \u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf\u3001\u666e\u901a\u51fd\u6570\u548c\u62bd\u8c61\u51fd\u6570 (\u4fdd\u7559\u4e00\u90e8\u5206\u590d\u7528)\uff0c\u4f46\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff0c\u53ea\u80fd\u5355\u7ee7\u627f \u63a5\u53e3: \u5728\u62bd\u8c61\u7c7b\u57fa\u7840\u4e0a\uff0c\u53d8\u91cf\u53ea\u80fd\u662f public static final \uff0c\u51fd\u6570\u53ea\u80fd\u662f\u62bd\u8c61\u51fd\u6570\uff0c\u53ef\u4ee5\u591a\u7ee7\u627f C++ \u4e2d\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u5206\u53f7\u524d\u52a0 =0 \u5373\u53ef\u58f0\u660e\u7eaf\u865a\u51fd\u6570\uff0c\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u662f\u62bd\u8c61\u7c7b","title":"?"},{"location":"_basis/_oop/a/#1","text":"\u4e00\u4e2a\u7c7b\u7ee7\u627f\u53e6\u5916\u4e00\u4e2a\u7c7b\uff0c\u53ef\u80fd\u51fa\u4e8e: \u5b9e\u73b0\u7ee7\u627f: \u2002 \u9700\u8981\u590d\u7528\u57fa\u7c7b\u7684\u53d8\u91cf\u4e0e\u65b9\u6cd5\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u518d\u5b9a\u4e49\u81ea\u5df1\u7684\u65b0\u4e1c\u897f \u5b50\u7c7b\u7684\u4ee3\u7801\u6563\u6b65\u5728\u4e24\u4e2a\u7c7b\u4e2d\uff0c\u589e\u52a0\u8026\u5408\uff1b\u7ec4\u5408\u4f18\u4e8e\u7ee7\u627f \u63a5\u53e3\u7ee7\u627f (\u5b50\u7c7b\u578b\u591a\u6001): \u2002 \u9700\u8981\u5411\u4e0a\u8f6c\u578b\u4e0e\u52a8\u6001\u7ed1\u5b9a","title":"1. \u7ee7\u627f"},{"location":"_basis/_oop/a/#1_1","text":"\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5fc5\u987b\u9075\u5faa: \u5148\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u5668\uff0c\u518d\u521d\u59cb\u5316\u81ea\u5df1\u7684\u90e8\u5206 C++ \u4e2d\u5728\u521d\u59cb\u8868\u5904\u8c03\u7528\u57fa\u7c7b\u7684 ctor \u5373\u53ef\uff0c\u5982\u679c\u6ca1\u8c03\u7528\u5c31\u5bf9\u57fa\u7c7b\u6210\u5458\u6267\u884c\u9ed8\u8ba4\u521d\u59cb\u5316\u3002 cpp impl class Book { std :: string isbn ; public : Book ( const std :: string & isbn ) : isbn ( isbn ) { } }; class Fiction : public Book { int price ; public : Fiction ( const std :: string & isbn , int price ) : Book ( isbn ), price ( price ) { } // \u987a\u5e8f\u4e0d\u540c\u4e5f\u884c }","title":"(1). \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570"},{"location":"_basis/_oop/a/#2","text":"C++ \u4e2d\uff0c\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u7684\u57fa\u7c7b\u5b50\u5bf9\u8c61\u90e8\u5206\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u53d7\u4e24\u4e2a\u56e0\u7d20\u5f71\u54cd: \u57fa\u7c7b\u4e2d\u8be5\u6210\u5458\u7684\u8bbf\u95ee\u8bf4\u660e\u7b26 \u6d3e\u751f\u7c7b\u7684\u6d3e\u751f\u5217\u8868\u4e2d\u7684\u8bbf\u95ee\u8bf4\u660e\u7b26 ( class \u9ed8\u8ba4\u79c1\u6709\u7ee7\u627f\uff0c struct \u9ed8\u8ba4\u516c\u6709) \u79c1\u6709\u7ee7\u627f/\u4fdd\u62a4\u7ee7\u627f\u4f1a\u5bfc\u81f4 (\u6ce8: \u6d3e\u751f\u8bbf\u95ee\u8bf4\u660e\u7b26\u53ea\u5f71\u54cd\u5bf9\u8c61\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u7c7b\u8be5\u662f\u4ec0\u4e48\u8fd8\u662f\u4ec0\u4e48): \u5bf9\u6d3e\u751f\u5bf9\u8c61\u7684\u57fa\u7c7b\u5b50\u5bf9\u8c61\u6210\u5458\u7684\u8bbf\u95ee\u53d7\u9650 \u6d3e\u751f\u7c7b\u5bf9\u8c61\u65e0\u6cd5\u5411\u4e0a\u8f6c\u578b \u79c1\u6709\u7ee7\u627f\u7684\u573a\u666f: e.g.1 \u2002 \u5b9e\u73b0\u67d0\u4e2a\u7c7b\u65f6\u53ea\u9700\u8981\u53e6\u4e00\u4e2a\u7c7b\u7684\u67d0\u4e9b\u5b9e\u73b0\uff0c\u4e0d\u9700\u8981\u7ee7\u627f\u5173\u7cfb class Timer { public : virtual void timeout () { ... } }; class Widget : private Timer { public : virtual void timeout () { Timer :: timeout (); doSomething (); } }; e.g.1 \u63cf\u8ff0\u7684\u662f\u573a\u666f\u7528\u7ec4\u5408\u5b9e\u73b0\u66f4\u4e3a\u5408\u9002\uff0c\u79c1\u6709\u7ee7\u627f\u5e38\u7528\u4e8e\u7a7a\u57fa\u7c7b\u4f18\u5316\u4e2d\u3002 e.g.2 \u2002 \u7a7a\u57fa\u7c7b\u4f18\u5316 (EBO) class MyAllocator { void method1 (); void method2 (); }; class MyVector : private MyAllocator { ... }; \u4e3a\u4fdd\u8bc1\u540c\u4e00\u7c7b\u578b\u7684\u4e0d\u540c\u5bf9\u8c61\u5730\u5740\u59cb\u7ec8\u6709\u522b\uff0c\u4efb\u4f55\u5bf9\u8c61\u7684\u5927\u5c0f\u81f3\u5c11\u4e3a 1 (\u5373\u4f7f\u4e3a\u7a7a)\uff0c\u4f46\u57fa\u7c7b\u5b50\u5bf9\u8c61\u4e0d\u53d7\u5236\u7ea6\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d: MyVector \u9700\u8981 MyAllocator \u7684\u65b9\u6cd5\uff0c\u4f46\u5b9e\u73b0\u4e3a\u7ec4\u5408\u4f1a\u6d6a\u8d39\u7a7a\u95f4 \u76f4\u63a5 public \u7ee7\u627f\u4f1a\u4f7f\u5f97 MyVector \u53ef\u4ee5\u8f6c\u578b\u4e3a MyAllocator \uff0c\u5e76\u4e0d\u5408\u9002","title":"(2). \u7ee7\u627f\u4e0e\u8bbf\u95ee\u63a7\u5236"},{"location":"_basis/_oop/a/#3","text":"\u4e00\u65e6\u57fa\u7c7b\u6807\u8bb0\u4e86\u67d0\u51fd\u6570\u662f virtual \uff0c\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u8be5\u51fd\u6570\u90fd\u662f\u865a\u51fd\u6570\uff0c\u65e0\u9700\u518d\u52a0 virtual override \u6709\u52a9\u4e8e\u68c0\u67e5\u91cd\u5199\u7684\u4eba\u5de5\u9519\u8bef (\u5f62\u53c2\u5217\u8868\u540e/\u5f15\u7528\u9650\u5b9a\u7b26\u540e/const \u540e) \u5b50\u7c7b\u578b\u591a\u6001\u6709\u65f6\u9700\u8981\u7c7b\u578b\u8f6c\u6362\uff0c\u53ef\u4ee5\u4f7f\u7528 static_cast \u6216 dynamic_cast \u5bf9\u8c61\u4e4b\u95f4\u4e0d\u5b58\u5728\u7c7b\u578b\u8f6c\u6362\uff0c\u53ea\u6709\u62f7\u8d1d ( Derived d ): Base b(d) : \u2002 \u8c03\u7528 Base::Base(const Base&) b = d : \u2002 \u8c03\u7528 Base::operator=(const Base&) final \u5173\u952e\u5b57: \u4fee\u9970\u7c7b class Base final {}; \u7981\u6b62\u8be5\u7c7b\u88ab\u7ee7\u627f \u4fee\u9970\u51fd\u6570 void func() const final; \u7981\u6b62\u8be5\u51fd\u6570\u88ab\u8986\u76d6 \u4fee\u9970\u865a\u51fd\u6570 void func() override final; \uff0c\u4fee\u9970\u6d3e\u751f\u7c7b\u7684\u65f6\u5019\u6709\u7528\uff0c\u610f\u56fe\u4f7f\u8986\u76d6\u5230\u6b64\u4e3a\u6b62","title":"(3). \u5176\u4ed6\u96f6\u788e"},{"location":"_basis/_oop/a/#2_1","text":"\u6d3e\u751f\u7c7b\u5bf9\u8c61\u53ef\u4ee5\u5047\u8bbe\u4e3a\u591a\u4e2a\u5b50\u5bf9\u8c61\u7684\u7ebf\u6027\u6392\u5217\uff0c\u4f46\u53d8\u91cf\u540d/\u51fd\u6570\u540d\u7684\u8bbf\u95ee\u662f\u6309\u4f5c\u7528\u57df\u89c4\u5219\u5d4c\u5957\u7684\uff0c\u5bf9\u5f62\u5982 obj.xxname \u7684\u8bed\u53e5\uff0c\u9700\u8981\u5c06 xxname \u7ed1\u5b9a\u5230\u67d0\u4e2a\u5b50\u5bf9\u8c61\u7684\u6210\u5458\uff0c\u6b64\u5373\u4e3a\u7ed1\u5b9a (\u8d77\u70b9 + \u4f5c\u7528\u57df). \u5224\u65ad\u662f\u4ec0\u4e48\u7ed1\u5b9a class Fu { public : std :: string name = \"\u7236\u53d8\u91cf\" ; void show () { cout << this -> name << endl ; cout << this -> func () << endl ; } virtual std :: string func () { cout << this -> name << endl ; return \"\u7236\u7c7b\u8c03\u7528\" ; } }; class Zi : public Fu { public : std :: string name = \"\u5b50\u53d8\u91cf\" ; std :: string func () { cout << this -> name << endl ; return \"\u5b50\u7c7b\u8c03\u7528\" ; } }; int main () { Zi zi ; Fu & fu = zi ; cout << fu . name << endl ; cout << fu . func () << endl ; fu . show (); } // \u7236\u53d8\u91cf \u5b50\u53d8\u91cf \u5b50\u7c7b\u8c03\u7528 \u7236\u53d8\u91cf \u5b50\u53d8\u91cf \u5b50\u7c7b\u8c03\u7528","title":"2. \u7ed1\u5b9a"},{"location":"_basis/_oop/a/#1_2","text":"\u9759\u6001\u7ed1\u5b9a \u2014\u2014 \u4ece\u9759\u6001\u7c7b\u578b\u5f00\u59cb\u7684\u540d\u5b57\u67e5\u627e \u4ece\u53d8\u91cf\u7684 \u9759\u6001\u7c7b\u578b \u51fa\u53d1\uff0c\u5411\u5916\u5c42\u4f5c\u7528\u57df\u5bfb\u627e\u8be5\u540d\u5b57\u7684\u5b9a\u4e49\u5728\u54ea \u627e\u5230\u540e\uff0c\u5982\u679c\u662f\u51fd\u6570\u540d\uff0c\u8fd8\u4f1a\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5 (\u4e0d\u901a\u8fc7\u5c31\u62a5\u9519) \u82e5 name \u662f\u865a\u51fd\u6570\u540d\u4e14 obj \u662f\u5f15\u7528/\u6307\u9488\uff0c\u8fd0\u884c\u65f6\u6267\u884c\u52a8\u6001\u7ed1\u5b9a \u2014\u2014 \u4ece\u52a8\u6001\u7c7b\u578b\u5f00\u59cb\u7684\u540d\u5b57\u67e5\u627e \u4ece\u53d8\u91cf\u7684 \u52a8\u6001\u7c7b\u578b \u51fa\u53d1\uff0c\u5411\u5916\u5c42\u4f5c\u7528\u57df\u5bfb\u627e\u540d\u5b57\u5b9a\u4e49 \u4e8c\u8005\u5bf9\u6bd4: \u540d\u5b57\u67e5\u627e\u7684\u903b\u8f91\u4e00\u6837\u4f46\u5b9e\u73b0\u4e0d\u540c\uff0c\u9759\u6001\u7ed1\u5b9a\u7f16\u8bd1\u671f\u8fdb\u884c\uff0c\u52a8\u6001\u7ed1\u5b9a\u5728\u8fd0\u884c\u65f6\u67e5\u627e\u7c7b\u7684\u865a\u8868\u5b9e\u73b0 \u52a8\u6001\u7ed1\u5b9a\u7684\u5177\u4f53\u5b9e\u73b0 class A { class B : public A { class C : public B { public : public : public : virtual void vfunc1 (); virtual void vfunc1 (); virtual void vfunc2 (); virtual void vfunc2 (); void func1 (); void func2 (); void func1 (); void func2 (); private : private : private : int m_data1 , m_data2 ; int mdata_3 ; int m_data1 ; }; }; \u6bcf\u4e2a\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\u90fd\u6709\u4e00\u4e2a\u865a\u8868 (\u6307\u9488\u6570\u7ec4)\uff0c\u5176\u4e2d\u4fdd\u5b58\u51fd\u6570\u6307\u9488\uff0c\u6ce8\u610f\u865a\u8868\u662f\u5c5e\u4e8e\u7c7b\u7684 \u865a\u8868\u7ed9\u51fa\u4e86\u8be5\u7c7b\u7684\u865a\u51fd\u6570\u540d\u5b57\u7ed1\u5b9a\u5230\u54ea\u4e2a\u5b9e\u4f8b\u4e0a\uff0c\u8fd9\u4e9b\u5728\u7f16\u8bd1\u65f6\u53ef\u4ee5\u786e\u5b9a \u7f16\u8bd1\u5668\u5728\u7c7b\u4e2d\u521b\u5efa\u4e00\u4e2a\u865a\u8868\u6307\u9488 vptr \uff0c\u4f7f\u5f97\u5bf9\u8c61\u5b9e\u4f8b\u5316\u65f6\u5305\u542b\u865a\u8868\u6307\u9488 \u2003\u2003 \u7531\u6b64\u53ef\u89c1\uff0c\u865a\u51fd\u6570\u7684\u4ee3\u4ef7\u5728\u4e8e\u9700\u8981\u989d\u5916\u7a7a\u95f4\uff0c\u4e14\u8fd0\u884c\u65f6\u9700\u8981\u989d\u5916\u65f6\u95f4\u8fdb\u884c\u540d\u5b57\u67e5\u627e","title":"(1). \u9759\u6001\u7ed1\u5b9a &amp; \u52a8\u6001\u7ed1\u5b9a"},{"location":"_basis/_oop/a/#2_2","text":"\u7f16\u8bd1\u65f6\u300c\u5148\u9759\u6001\u7ed1\u5b9a\u518d\u7c7b\u578b\u68c0\u67e5\u300d\uff0c\u53ef\u80fd\u5bfc\u81f4\u6d3e\u751f\u7c7b\u51fd\u6570\u540d\u9519\u8bef\u5730\u906e\u853d\u4e86\u57fa\u7c7b\u7684\u51fd\u6570\u540d \u52a8\u6001\u7ed1\u5b9a\u76f8\u5f53\u4e8e\u628a\u91cd\u8f7d\u51fd\u6570\u89c6\u4e3a\u4e0d\u540c\u51fd\u6570\uff0c\u8fd9\u4e5f\u662f\u4e8c\u8005\u540d\u5b57\u67e5\u627e\u8fc7\u7a0b\u7684\u533a\u522b\u4e4b\u4e00 e.g.1 \u2002\u6d3e\u751f\u7c7b\u60f3\u589e\u52a0\u4e00\u4e2a\u65b0\u91cd\u8f7d \u6d3e\u751f\u7c7b\u589e\u52a0\u65b0\u91cd\u8f7d\u4f7f\u5bf9 f \u7684\u67e5\u627e\u5361\u5728 derived \uff0c\u9020\u6210\u7c7b\u578b\u68c0\u67e5\u9519\u8bef struct Base { void f ( int ) { cout << \"Base 1xint\" << endl ;} }; struct Derived : public Base { void f ( int , int , int ) { cout << \"Derived 3xint\" << endl ; } }; int main { Derived d ; d . f ( 1 ); // error } e.g.2 \u2002 \u6d3e\u751f\u7c7b\u53ea\u60f3\u91cd\u5199\u4e00\u90e8\u5206\u7236\u7c7b\u7684\u91cd\u8f7d\u51fd\u6570 \u6d3e\u751f\u5bf9\u8c61\u8981\u60f3\u8bbf\u95ee\u7236\u5bf9\u8c61\u7684\u5168\u90e8\u91cd\u8f7d\u51fd\u6570 \u8981\u4e48\u4e00\u4e2a\u4e5f\u4e0d\u91cd\u5199\uff0c\u540d\u5b57\u67e5\u627e\u8fc7\u7a0b\u4f1a\u81ea\u52a8\u5230\u7236\u7c7b\u7684\u4f5c\u7528\u57df \u8981\u4e48\u5168\u90e8\u91cd\u5199 \u800c\u53ea\u60f3\u91cd\u5199\u4e00\u90e8\u5206\u5c31\u4f1a\u5bfc\u81f4\u53e6\u4e00\u90e8\u5206\u65e0\u6cd5\u8bbf\u95ee\u3002 struct Base { virtual f ( int ) { cout << \"Base 1xint\" << endl ; } virtual f ( int , int ) { cout << \"Base 2xint\" << endl ; } }; struct Derived : public Base { virtual f ( int , int ) { cout << \"Derived 2xint\" << endl ; } }; int main { Derived * d ; Base * b = d ; b -> f ( 1 ); // correct d -> f ( 1 ); // compile error } \u5728 Derived \u4e2d\u58f0\u660e\u4e00\u4e2a using Base::f; \uff0c\u7c7b\u578b\u4e0d\u5339\u914d\u7684\u51fd\u6570\u4f1a\u8f6c\u800c\u8bbf\u95ee\u8fd9\u4e2a using \u58f0\u660e\u70b9\u3002","title":"(2). \u51fd\u6570\u91cd\u8f7d &amp; \u9759\u6001\u7ed1\u5b9a"},{"location":"_basis/_oop/a/#3_1","text":"\u901a\u8fc7 derived->Base::func() \u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\uff1a \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u7684\u540c\u540d\u53d8\u91cf\u6216\u51fd\u6570 \u56de\u907f\u52a8\u6001\u7ed1\u5b9a e.g.1 \u2002 \u540d\u5b57\u51b2\u7a81\u65f6\uff0c\u4f7f\u7528\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u8bbf\u95ee\u9690\u85cf\u6210\u5458 struct Base { int mem = 0 ; }; struct Derived : Base { int mem = 100 ; int getMem () { return Base :: mem ; } }; e.g.2 \u2002 \u56de\u907f\u52a8\u6001\u7ed1\u5b9a struct Base { virtual void func () { } }; struct Derived : public Base { void func () { this -> Base :: func (); doSomething (); } }; int main { Base * b = new Derived (); b -> func (); }","title":"(3). \u4f5c\u7528\u57df\u8fd0\u7b97\u7b26"},{"location":"_basis/_oop/a/#4","text":"\u8003\u8651\u666e\u901a\u8c03\u7528 d->func() \u548c\u591a\u6001\u8c03\u7528 b->func() \u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u53d6\u52a8\u6001\u7c7b\u578b\uff0c\u8981\u60f3\u83b7\u53d6\u52a8\u6001\u7c7b\u578b\u5fc5\u987b\u4ed8\u51fa\u4ee3\u4ef7 \u5e0c\u671b\u666e\u901a\u8c03\u7528\u4e0d\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u800c\u53ea\u6709\u591a\u6001\u8c03\u7528\u4ed8\u51fa\u8fd0\u884c\u65f6\u7684\u4ee3\u4ef7 \u56e0\u6b64\u5f15\u5165\u4e86 virtual \u6807\u8bb0\uff0c\u8868\u660e\u865a\u51fd\u6570\u662f\u300c\u9700\u8981\u591a\u6001\u8c03\u7528\u7684\u51fd\u6570\u300d \u4e3a\u4ec0\u4e48\u786e\u5b9a\u52a8\u6001\u7c7b\u578b\u8981\u63a8\u5230\u8fd0\u884c\u65f6? \u63a5\u53e3\u7ee7\u627f/\u5b50\u7c7b\u578b\u591a\u6001/\u5411\u4e0a\u8f6c\u578b/\u52a8\u6001\u7ed1\u5b9a\uff0c\u5747\u6307 oop \u4e2d\u7684\u4ee5\u4e0b\u573a\u666f: class Base { ... }; class Derived : public Base { ... }; ... Derived derived Base & base = derived ; base . func (); base \u7684\u9759\u6001\u7c7b\u578b\u662f Base \uff0c\u52a8\u6001\u7c7b\u578b (\u5b9e\u9645\u7ed1\u5b9a\u7684\u7c7b\u578b) \u662f Derived \uff0c\u9700\u8981\u6ce8\u610f \u7f16\u8bd1\u65f6\u672a\u5fc5\u53ef\u4ee5\u786e\u5b9a\u4e00\u4e2a\u53d8\u91cf\u7684\u52a8\u6001\u7c7b\u578b \u628a derived \u7684 func() \u7ed1\u5b9a\u5230 base \u4e0a\u5fc5\u987b\u63a8\u5230\u8fd0\u884c\u65f6 \u8fd9\u6837\u8bbe\u8ba1\u4f1a\u5f15\u5165\u201c\u975e\u865a\u51fd\u6570\u4f7f\u7528\u591a\u6001\u8c03\u7528\u201d\u8fd9\u79cd\u8bed\u6cd5\u6b63\u786e\u7684\u9519\u8bef\u884c\u4e3a\uff0c\u8fd9\u4e5f\u7b26\u5408 C++ \u300c\u76f8\u4fe1\u7a0b\u5e8f\u5458\uff0c\u63d0\u4f9b\u7075\u6d3b\u6027\u300d\u7684\u5b97\u65e8 virtual non-virtual \u666e\u901a\u8c03\u7528 \u9759\u6001\u7c7b\u578b\u52a8\u6001\u7c7b\u578b\u4e00\u81f4\uff0c\u6d6a\u8d39 \u591a\u6001\u8c03\u7528 \u4f5c\u7528\u57df\u8986\u76d6\uff0c\u901a\u5e38\u662f\u5fd8\u52a0\u4e86","title":"(4). \u865a\u6807\u8bb0\u7684\u610f\u4e49"},{"location":"_basis/_oop/a/#3_2","text":"\u62bd\u8c61\u7c7b\u548c\u63a5\u53e3\u662f\u66f4\u52a0\u503e\u5411\u63a5\u53e3\u7ee7\u627f\u7684\u57fa\u7c7b\uff0c\u5f52\u4e00\u5316\u5171\u540c\u7684\u884c\u4e3a\uff0c\u820d\u5f03\u590d\u7528\u7684\u8026\u5408 \u62bd\u8c61\u7c7b: \u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf\u3001\u666e\u901a\u51fd\u6570\u548c\u62bd\u8c61\u51fd\u6570 (\u4fdd\u7559\u4e00\u90e8\u5206\u590d\u7528)\uff0c\u4f46\u4e0d\u80fd\u88ab\u5b9e\u4f8b\u5316\uff0c\u53ea\u80fd\u5355\u7ee7\u627f \u63a5\u53e3: \u5728\u62bd\u8c61\u7c7b\u57fa\u7840\u4e0a\uff0c\u53d8\u91cf\u53ea\u80fd\u662f public static final \uff0c\u51fd\u6570\u53ea\u80fd\u662f\u62bd\u8c61\u51fd\u6570\uff0c\u53ef\u4ee5\u591a\u7ee7\u627f C++ \u4e2d\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u5206\u53f7\u524d\u52a0 =0 \u5373\u53ef\u58f0\u660e\u7eaf\u865a\u51fd\u6570\uff0c\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u662f\u62bd\u8c61\u7c7b","title":"3. \u62bd\u8c61\u7c7b\u548c\u63a5\u53e3"},{"location":"_basis/_oop/x/","text":"p533 \u7c7b\u4e0e\u58f0\u660e \u8986\u76d6\u865a\u51fd\u6570\u8981\u6c42\u53c2\u6570\u8868\u4e00\u6837\uff0c\u4f46\u8fd4\u56de\u503c\u4e0d\u4e00\u5b9a\u4e00\u6837 \u865a\u51fd\u6570\u548c\u9ed8\u8ba4\u5b9e\u53c2\uff0c\u6709\u5751 \u53cb\u5143\u4e0e\u7ee7\u627f p545","title":"X"},{"location":"_basis/_smart_pointers/ptr1/","text":"1. RAII (Resource Acquisition Is Initialization) \u23f3 (1). \u57fa\u672c\u5b9a\u4e49 \u23f3 RAII \u662f C++ \u7ba1\u7406\u8d44\u6e90\u7684\u65b9\u5f0f RAII \u7c7b\u5728 ctor \u4e2d\u83b7\u53d6\u8d44\u6e90\uff0c\u5728 dtor \u4e2d\u91ca\u653e\u8d44\u6e90\uff0c\u5e76\u9650\u5236\u62f7\u8d1d\u6210\u5458\u7684\u884c\u4e3a \u5bf9\u8c61\u751f\u5b58\u671f\u7ed3\u675f\u540e\u8c03\u7528 dtor \u6808\u5bf9\u8c61\u79bb\u5f00\u4f5c\u7528\u57df\u5373\u7ed3\u675f\u751f\u5b58\u671f\uff0c\u5806\u5bf9\u8c61\u88ab\u91ca\u653e\u540e\u7ed3\u675f\u751f\u5b58\u671f \u7531\u6b64\u5bf9\u8c61\u7684\u751f\u5b58\u671f\u548c\u8d44\u6e90\u7684\u751f\u5b58\u671f\u4e00\u81f4\u3002\u8fd9\u6837\u7c7b\u4f7f\u7528\u8005\u83b7\u5f97\u4e86\u81ea\u52a8 gc\u3002\u81ea\u52a8 gc \u7684\u597d\u5904: (1). \u6808\u53d8\u91cf\u4f7f\u7528 RAII \u7c7b void bad () { m . lock (); // \u8bf7\u6c42\u4e92\u65a5\u4f53 f (); // \u82e5 f() \u629b\u5f02\u5e38\uff0c\u4e92\u65a5\u4f53\u6c38\u4e0d\u91ca\u653e if (...) return ; // \u63d0\u524d\u8fd4\u56de\uff0c\u4e92\u65a5\u4f53\u6c38\u4e0d\u91ca\u653e m . unlock ; } \u5c06\u4e92\u65a5\u4f53\u5c01\u88c5\u5728 class \u4e2d\uff0c\u751f\u5b58\u671f\u7ed3\u675f\u540e\u81ea\u52a8\u91ca\u653e void good () { std :: lock_guard < std :: mutex > lock ( m ); f (); if (...) return ; } (2). \u6210\u5458\u53d8\u91cf\u4f7f\u7528 RAII \u7c7b class Obj { std :: lock_guard < std :: mutex > lock ( m ); ... }; \u5bf9\u8c61\u6790\u6784\u524d\u9006\u5e8f\u6267\u884c\u6210\u5458\u7684\u6790\u6784\uff0c\u5bf9\u8c61\u7684\u6811\u7ed3\u6784\u81ea\u52a8\u5730\u88ab\u6709\u6548\u6790\u6784 (2). \u6240\u6709\u6743 \u23f3 RAII \u548c ownership \u6302\u94a9\uff0c\u5e7f\u4e49\u7684\u8bf4\uff0c\u5bf9\u8c61 A \u8d1f\u8d23\u8d44\u6e90 B \u7684\u521b\u5efa\u548c\u91ca\u653e $\\Longrightarrow$ A owns B\u3002\u4ee5\u667a\u80fd\u6307\u9488\u4e3a\u4f8b: \u72ec\u5360\u6240\u6709\u6743\uff0c unique_ptr : ctor \u521d\u59cb\u5316\uff0cdtor \u91ca\u653e\uff0cmove-only \u5171\u4eab\u6240\u6709\u6743, shared_ptr : ctor \u548c dtor \u6839\u636e\u5f15\u7528\u8ba1\u6570\u7684\u60c5\u51b5\u6267\u884c\uff0c\u62f7\u8d1d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u8d4b\u503c\u589e\u52a0\u4e00\u4e2a\u51cf\u5c11\u4e00\u4e2a\uff0c\u79fb\u52a8\u4e0d\u53d8 \u65e0\u6240\u6709\u6743\u8bed\u4e49\uff0c\u53ea\u662f\u7528\u88f8\u6307\u9488\u8bbf\u95ee\u8d44\u6e90: \u8bbf\u95ee\u65f6\u4fdd\u8bc1\u8d44\u6e90\u5b58\u5728\uff0c\u751f\u5b58\u671f\u7ed3\u675f\u540e\u4e5f\u4e0d\u9700\u8981\u5b83\u91ca\u653e\u8d44\u6e90 2. unique_ptr \u23f3 (1). \u57fa\u672c\u64cd\u4f5c \u23f3 op description unique_ptr<T> u unique_ptr<T, D> u \u7a7a unique_ptr unique_ptr<T> u(new T) \u6ce8\u610f\u4e0d\u80fd\u62f7\u8d1d\u521d\u59cb\u5316 u = nullptr \u91ca\u653e u \u6307\u5411\u7684\u5bf9\u8c61\uff0c\u5e76\u5c06 u \u7f6e\u4e3a\u7a7a u.release() u \u653e\u5f03\u63a7\u5236\u6743: \u8fd4\u56de\u6307\u9488\uff0c\u5e76\u7f6e\u4e3a\u7a7a u.reset() u.reset(q) u.reset(nullptr) \u91ca\u653e u \u6307\u5411\u7684\u5bf9\u8c61\uff0c\u5e76\u7f6e\u4e3a\u7a7a\uff0c\u5982\u679c\u7ed9\u4e86\u53c2\u6570\uff0c u \u6307\u5411\u7ed9\u5b9a\u5bf9\u8c61 u.get() \u8fd4\u56de u \u4e2d\u4fdd\u5b58\u7684\u6307\u9488\uff0c\u5e94\u5c0f\u5fc3\u4f7f\u7528 transfer ownership \u89c1\u4e0b \u7ed9\u7a7a unique_ptr \u8d4b\u503c u.reset(p) (2). \u79fb\u52a8\u8bed\u4e49 \u23f3 transfer ownership unique_ptr \u5173\u952e\u7684\u64cd\u4f5c\u4e4b\u4e00\u662f\u8f6c\u79fb\u6307\u9488\u6240\u6709\u6743 (i.e. \u79fb\u52a8\u8bed\u4e49)\uff0c\u5b9e\u73b0\u65b9\u5f0f // 1 unique_ptr < string > p1 ( p2 . release ()); unique_ptr < string > p3 ( new string ( \"\" )); p3 . reset ( p4 . release ()); // 2 unique_ptr < string > p5 = std :: move ( p6 ); \u5bf9\u6bd4: \u65b9\u5f0f 1: \u53ef\u8bfb\u6027\u5dee\uff0c\u4e14\u4e0d\u4f1a\u79fb\u52a8 custom deleter \u65b9\u5f0f 2: \u5b8c\u7f8e factory method unique_ptr < SomeObj > create_obj (...) { return unique_ptr < SomeObj > ( new SomeObj (...)); } \u53ef\u4ee5\u8fd4\u56de unique_ptr \u7684\u539f\u56e0: \u6808\u4e0a\u5bf9\u8c61\u751f\u5b58\u671f\u7ed3\u675f\uff0cC++ \u7684 copy elision \u673a\u5236\u4f1a\u4f18\u5148\u5c1d\u8bd5\u79fb\u52a8\uff0c\u4e0d\u884c\u7684\u8bdd\u518d\u5c1d\u8bd5\u62f7\u8d1d (3). vs auto_ptr \u23f3 auto_ptr \u662f\u65e7 C++ \u5b9e\u73b0\u72ec\u5360\u6240\u6709\u6743\u7684\u667a\u80fd\u6307\u9488 auto_ptr \u9700\u8981\u80fd\u5b58\u5165\u5bb9\u5668\uff0c\u800c\u5bb9\u5668\u662f\u503c\u8bed\u4e49\u7684\uff0c auto_ptr \u628a\u8d4b\u503c\u5f53\u79fb\u52a8\u4f7f \u8d4b\u503c\u4f7f\u539f\u6307\u9488\u53d8\u4e3a null \uff0c\u5bfc\u81f4\u8ff7\u60d1\u884c\u4e3a\uff0c\u4f8b\u5982\u65e0\u6cd5\u6392\u5e8f // ToDo: an example of factory 3. shared_ptr \u23f3 \u5f53\u67d0\u4e2a\u6307\u9488\u4e0d\u88ab\u67d0\u4e2a\u7279\u5b9a\u7684\u667a\u80fd\u6307\u9488\u5bf9\u8c61\u6240\u6709\uff0c\u5177\u6709\u300c\u5171\u4eab\u6240\u6709\u6743\u300d\u8bed\u4e49\uff0c\u5c31\u9002\u7528 shared_ptr \u3002\u5b83\u9700\u8981\u66f4\u5927\u7684\u5f00\u9500: \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a shared_ptr \u65f6\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e2a object \u548c\u4e00\u4e2a\u63a7\u5236\u5757 (\u5305\u542b ref count\u3001weak count\u3001custom deleter, etc.) \u6bcf\u4e2a shared_ptr \u9700\u8981\u5305\u542b\u5bf9\u539f\u5bf9\u8c61\u7684\u5f15\u7528\u548c\u5bf9\u63a7\u5236\u5757\u7684\u5f15\u7528\uff0c\u7ea6\u4e3a\u88f8\u6307\u9488\u7684 2 \u500d\u7a7a\u95f4 \u9012\u589e\u9012\u51cf\u5f15\u7528\u662f\u539f\u5b50\u6027\u7684\uff0c\u6bd4\u975e\u539f\u5b50\u64cd\u4f5c\u6162 shared_ptr \u7528\u4ee5\u4e0a\u4ee3\u4ef7\u6362\u53d6\u81ea\u52a8\u5783\u573e\u56de\u6536\u3002 \u5bf9\u6bd4 shared_ptr \u548c unique_ptr \u4e8c\u8005\u9664\u672c\u8d28\u533a\u522b\u5916\uff0c\u4f7f\u7528\u4e0a\u7684\u533a\u522b: shared_ptr \u4e5f\u652f\u6301\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u4f46\u4e0d\u5185\u5d4c\u5728\u7c7b\u578b\u4fe1\u606f\u4e2d shared_ptr \u4e0d\u652f\u6301\u6570\u7ec4 shared_ptr \u652f\u6301\u7684\u64cd\u4f5c op description shared_ptr<T> sp; \u503c\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u7a7a\u6307\u9488 p , *p , p->mem \u53ef\u4ee5\u50cf\u666e\u901a\u6307\u9488\u4e00\u6837\u4f7f\u7528\u667a\u80fd\u6307\u9488\u7684\u53d8\u91cf\u540d make_shared<T>(args) \u4ee5 emplace \u7684\u65b9\u5f0f\u521d\u59cb\u5316 shared_ptr<T> p(q); \u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u9012\u589e q \u4e2d\u7684\u8ba1\u6570\u5668 p = q \u8d4b\u503c\uff0c\u9012\u51cf p \u7684\u8ba1\u6570\uff0c\u9012\u589e q \u7684\u8ba1\u6570 swap(p, q) / p.swap(q) \u4ea4\u6362 p \u548c q \u7684\u6307\u9488 p.get() \u8fd4\u56de p \u4e2d\u4fdd\u5b58\u7684\u539f\u59cb\u7c7b\u578b\u6307\u9488\uff0c\u5e94\u5c0f\u5fc3\u4f7f\u7528 p.use_count() \u8fd4\u56de p \u7684\u8ba1\u6570\uff0c\u53ef\u80fd\u5f88\u6162\uff0c\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5 (1). \u521d\u59cb\u5316 \u23f3 shared_ptr \u6709\u4e24\u79cd\u521d\u59cb\u5316\u65b9\u5f0f: \u901a\u8fc7 make_shared \u4ee5 emplace \u7684\u65b9\u5f0f \u76f4\u63a5\u521d\u59cb\u5316\uff0c\u901a\u8fc7\u539f\u59cb\u6307\u9488\u53d8\u91cf (\u6216 unique_ptr ) \u9996\u5148\u5e94\u907f\u514d\u4ece\u539f\u59cb\u6307\u9488\u4e0a\u521b\u5efa shared_ptr \uff0c\u975e\u6b64\u4e0d\u53ef\u4e5f\u8981\u4f7f\u7528\u4e34\u65f6\u5bf9\u8c61 example void process ( shared_ptr < int > ptr ) { } ... int * x ( new int ( 1024 )); process ( shared_ptr < int > ( x )); int j = * x ; cout << j << endl ; \u7531\u4e8e\u6df7\u7528\u4e86\u539f\u59cb\u6307\u9488\u548c shared_ptr \uff0c\u5bfc\u81f4\u4e86 undefined enabled_shared_from_this // \u7528\u4e8e\u8ddf\u8e2a\u5df2\u7ecf\u5904\u7406\u8fc7\u7684 Widget \u7684\u6570\u636e\u7ed3\u6784: std :: vector < std :: shared_ptr < Widget >> processedWidgets ; // Widget \u7c7b class Widget { public : void process () { ... processedWidgets . emplace_back ( this ); // \u9519\u8bef: \u76f8\u5f53\u4e8e\u65b0\u5f00\u4e86\u4e00\u4e2a shared_ptr } }; \u9700\u6c42: \u5728\u7c7b\u5185\u62ff\u5230\u4e00\u4e2a this \u7684 shared_ptr \uff0c\u4e14\u8fd9\u4e2a shared_ptr \u4e0d\u662f\u7b2c\u4e00\u4e2a class Widget : public std :: enable_shared_from_this < Widget > { public : void process () { ... processedWidgets . emplace_back ( shared_from_this ()); } }; \u800c\u5bf9\u6bd4\u300c\u4f7f\u7528 make_shared \u521d\u59cb\u5316\u300d\u548c\u300c\u4f7f\u7528 new \u7684\u4e34\u65f6\u5bf9\u8c61\u76f4\u63a5\u521d\u59cb\u5316\u300d\u4e5f\u662f\u524d\u8005\u66f4\u597d\uff0c\u539f\u56e0\u5728\u4e8e: 1 . \u4f7f\u7528 make_shared \u53ef\u4ee5\u5c11\u6253\u4e00\u6b21\u7c7b\u578b\uff0c\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 auto spw1 ( std :: make_shared < Widget > ()); //\u4f7f\u7528make\u51fd\u6570 std :: shared_ptr < Widget > spw2 ( new Widget ); //\u4e0d\u4f7f\u7528make\u51fd\u6570 2 . \u4f7f\u7528 make_shared \u66f4\u52a0\u5f02\u5e38\u5b89\u5168 processWidget ( std :: shared_ptr < Widget > ( new Widget ), computePriority ()); \u51fd\u6570\u4f20\u53c2\u524d\u5fc5\u987b\u5148\u8ba1\u7b97\u5b9e\u53c2\uff0c\u800c\u7f16\u8bd1\u5668\u5728\u8f6c\u6362\u76ee\u6807\u4ee3\u7801\u65f6\u4e0d\u5fc5\u6309\u7167\u987a\u5e8f\uff0c\u53ef\u80fd\u4ea7\u751f new Widget > computePriority > shared_ptr ctor \u7684\u987a\u5e8f\uff0c computePriority \u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5bfc\u81f4 new Widget \u6cc4\u6f0f 3 . \u4f7f\u7528 make_shared \u5185\u5b58\u5206\u914d\u66f4\u5c11 std::shared_ptr<Widget> spw(new Widget); new \u5bf9\u8c61\u4e00\u6b21\u5206\u914d\uff0c\u63a7\u5236\u5757\u53c8\u4e00\u6b21\u5206\u914d auto spw = std::make_shared<Widget>(); \u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u540c\u65f6\u5bb9\u7eb3\u5bf9\u8c61\u548c\u63a7\u5236\u5757 \u9700\u8981\u8003\u8651\u4e00\u4e9b\u53ea\u80fd\u7528\u76f4\u63a5\u521d\u59cb\u5316\u7684\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u81ea\u5b9a\u4e49\u5220\u9664\u5668\u6216\u82b1\u62ec\u53f7\u521d\u59cb\u5316 ... 4. weak_ptr \u23f3 weak_ptr \u652f\u6301\u7684\u64cd\u4f5c op description weak_ptr<T> wp(sp); \u548c shared_ptr \u6307\u5411\u76f8\u540c\u5bf9\u8c61 wp = p p \u53ef\u4ee5\u662f shared_ptr \u6216 weak_ptr wp.reset() \u5c06 wp \u7f6e\u4e3a\u7a7a wp.use_count() \u5171\u4eab\u7684 shared_ptr \u6570\u91cf wp.expired() \u662f\u5426\u8fc7\u671f\uff0c\u5373 use_count == 1 wp.lock() \u82e5 expired \u4e3a true\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 shared_ptr \uff0c \u5426\u5219\u8fd4\u56de\u6307\u5411 wp \u7684\u8d44\u6e90\u5bf9\u8c61\u7684 shared_ptr shared_ptr<T> sp(wp) \u82e5 wp \u60ac\u7a7a\uff0c\u4f1a\u629b\u51fa std::bad_weak_ptr \u5f02\u5e38 weak_ptr \u7684\u7279\u6027: \u548c shared_ptr \u914d\u5957\u4f7f\u7528\uff0c\u4e14\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570 \u5728\u60ac\u7a7a (dangle) \u65f6\u53ef\u4ee5\u77e5\u6653 ( wp.expired() ) weak_ptr \u9700\u8981\u4e00\u4e2a\u64cd\u4f5c: \u5f53 weak_ptr \u8fc7\u671f\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6307\u9488\uff1b\u5426\u5219\u8fd4\u56de\u5f15\u7528\u7684\u8d44\u6e90 (\u7684 share_ptr ) \u82e5\u6309 if !expired then \u89e3\u5f15\u7528 \u5b9e\u73b0\u4f1a\u9020\u6210\u7ade\u6001\u6761\u4ef6 ( weak_ptr \u4e0d\u652f\u6301\u89e3\u5f15\u7528)\uff0c\u56e0\u6b64\u7531 lock() \u5b9e\u73b0 weak_ptr \u7684\u4ee3\u4ef7\u4e0e shared_ptr \u76f8\u5f53\uff0c\u9700\u8981\u5bf9\u63a7\u5236\u5757\u7684\u5f15\u7528\uff0c\u5bf9 weak count \u7684\u52a0\u51cf\u6d89\u53ca\u539f\u5b50\u64cd\u4f5c\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 weak count weak_ptr \u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5224\u65ad\u662f\u5426\u8fc7\u671f\uff0c\u56e0\u6b64 shared_ptr \u7684\u6790\u6784\u903b\u8f91\u4e3a: \u5f53 ref_count=0 \uff0c\u6790\u6784\u8d44\u6e90\uff0c\u6b64\u65f6 wp \u5df2\u7ecf\u65e0\u6cd5\u8f6c\u6362\u4e3a sp \uff0c\u7136\u540e\u5f53 weak_count \u4e5f\u4e3a 0\uff0c\u518d\u6790\u6784\u63a7\u5236\u5757 weak_ptr \u6f5c\u5728\u7684\u4f7f\u7528\u573a\u666f\u5305\u62ec \u7f13\u5b58\u3001\u89c2\u5bdf\u8005\u5217\u8868\u3001\u6253\u7834 shared_ptr \u7684\u73af\u72b6\u7ed3\u6784 (1). \u7f13\u5b58 \u23f3 \u8003\u8651\u4e00\u4e2a naive \u7684\u5de5\u5382\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ea\u8bfb\u5bf9\u8c61\u7684\u667a\u80fd\u6307\u9488 std :: unique_ptr < const Widget > loadWidget ( WidgetID id ); \u573a\u666f: loadWidget \u662f\u4e00\u4e2a\u6602\u8d35\u7684\u64cd\u4f5c (\u9700\u8981\u64cd\u4f5c\u6587\u4ef6\u6216\u6570\u636e\u5e93 I/O)\uff0c\u4e14\u4f7f\u7528\u91cd\u590d\u7684 id \u5f88\u5e38\u89c1 \u5f15\u5165\u7f13\u5b58\uff0c\u5219 cache \u548c\u8c03\u7528\u8005\u90fd\u9700\u8981 Widget \u7684\u6307\u9488\uff0c\u4e0d\u80fd\u7528 unique_ptr \u8c03\u7528\u8005\u51b3\u5b9a Widget \u7684\u751f\u5b58\u671f\uff1a\u5f53\u6ca1\u6709 caller \u4f7f\u7528 Widget \u540e\uff0c Widget \u5e94\u8be5\u88ab\u9500\u6bc1 \u4f7f\u7528 shared_ptr \u7531\u4e8e cache \u5fc5\u987b\u4fdd\u5b58\u4e00\u4efd\uff0c\u65e0\u6cd5\u5b9e\u73b0\u6ca1\u6709 caller \u4f7f\u7528\u5c31\u88ab\u9500\u6bc1 cache \u7684\u6307\u9488\u9700\u8981\u5224\u65ad\uff0c\u5982\u679c\u7f13\u5b58\u7684\u8d44\u6e90\u5df2\u7ecf\u7a7a\u60ac\u5c31\u91cd\u65b0\u7f13\u5b58 \u88f8\u6307\u9488\u505a\u4e0d\u5230 a quick-and-dirty implementation std :: shared_ptr < const Widget > fastLoadWidget ( WidgetID id ) { static std :: unordered_map < WidgetID , std :: weak_ptr < const Widget >> cache ; auto objPtr = cache [ id ]. lock (); if ( ! objPtr ) { objPtr = loadWidget ( id ); // unique_ptr -> shared_ptr cache [ id ] = objPtr ; // shared_ptr -> weak_ptr } return objPtr ; } (2). Observer Design Pattern \u23f3 subject \u548c observers \u5b58\u5728\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u4e00\u65e6 subject \u505a\u51fa\u6539\u53d8\uff0c\u4f9d\u8d56\u5b83\u7684 observers \u9700\u8981\u6539\u53d8\u72b6\u6001\uff0c\u56e0\u6b64 subject \u901a\u5e38\u7ef4\u62a4\u4e00\u4e2a observerList \u3002 \u5c3d\u7ba1 observers \u662f subject \u7684\u6210\u5458\uff0c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684 \u300c\u65e0\u6240\u6709\u6743\u300d\u7684\u4f8b\u5b50\uff0c\u89c2\u5bdf\u8005\u548c\u4e3b\u9898\u4e4b\u95f4\u5404\u6709\u5404\u7684 lifespan subject \u4ec5\u9700\u8981\u77e5\u9053\u4fdd\u5b58\u7684 observer \u662f\u5426\u5df2\u7ecf\u60ac\u7a7a\uff0c\u56e0\u6b64\u6b64\u5904\u9002\u7528 weak_ptr (3). shared_ptr \u7684\u5faa\u73af\u5f15\u7528 \u23f3 \u5047\u8bbe A \u548c C \u5171\u4eab B \u7684\u6240\u6709\u6743\uff1b\u4e14 B \u6307\u5411 A \u7684\u6307\u9488\u4e5f\u5f88\u6709\u7528\uff0c\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u6307\u9488: \u539f\u59cb\u6307\u9488: \u2002 \u82e5 A \u5148\u88ab\u9500\u6bc1\uff0c C \u7ee7\u7eed\u6307\u5411 B \uff0c\u4e14 B \u65e0\u6cd5\u5224\u5b9a\u6307\u9488\u662f\u5426\u60ac\u7a7a shared_ptr : \u2002 \u9020\u6210\u5faa\u73af\u5f15\u7528\uff0c C \u88ab\u9500\u6bc1\u540e\uff0c A \u548c B \u90fd\u88ab\u6cc4\u9732 weak_ptr : \u2002 \u4e0d\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5224\u5b9a\u60ac\u7a7a \u4f7f\u7528 weak_ptr \u6253\u7834 shared_ptr \u7684\u5faa\u73af\u4e5f\u5e76\u4e0d\u5e38\u7528\u3002\u4ee5\u4e25\u683c\u5206\u5c42\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u4f8b\uff0c\u5b50\u7ed3\u70b9\u53ea\u88ab\u7236\u7ed3\u70b9\u6301\u6709\uff0c\u7236\u5bf9\u5b50\u7684\u5f15\u7528\u53ef\u7528 unique_ptr \u5b9e\u73b0\uff0c\u800c\u7531\u4e8e\u5b50\u7684\u751f\u5b58\u671f\u4e00\u5b9a\u77ed\u4e8e\u7236\u7ed3\u70b9\uff0c\u5b50\u7ed3\u70b9\u4e0d\u53ef\u80fd\u89e3\u5f15\u7528\u60ac\u6302\u7684\u7236\u6307\u9488\uff0c\u56e0\u6b64\u53ef\u7528\u539f\u59cb\u6307\u9488\u5b9e\u73b0\u3002","title":1},{"location":"_basis/_smart_pointers/ptr1/#1-raii-resource-acquisition-is-initialization","text":"","title":"1. RAII (Resource Acquisition Is Initialization)"},{"location":"_basis/_smart_pointers/ptr1/#1","text":"RAII \u662f C++ \u7ba1\u7406\u8d44\u6e90\u7684\u65b9\u5f0f RAII \u7c7b\u5728 ctor \u4e2d\u83b7\u53d6\u8d44\u6e90\uff0c\u5728 dtor \u4e2d\u91ca\u653e\u8d44\u6e90\uff0c\u5e76\u9650\u5236\u62f7\u8d1d\u6210\u5458\u7684\u884c\u4e3a \u5bf9\u8c61\u751f\u5b58\u671f\u7ed3\u675f\u540e\u8c03\u7528 dtor \u6808\u5bf9\u8c61\u79bb\u5f00\u4f5c\u7528\u57df\u5373\u7ed3\u675f\u751f\u5b58\u671f\uff0c\u5806\u5bf9\u8c61\u88ab\u91ca\u653e\u540e\u7ed3\u675f\u751f\u5b58\u671f \u7531\u6b64\u5bf9\u8c61\u7684\u751f\u5b58\u671f\u548c\u8d44\u6e90\u7684\u751f\u5b58\u671f\u4e00\u81f4\u3002\u8fd9\u6837\u7c7b\u4f7f\u7528\u8005\u83b7\u5f97\u4e86\u81ea\u52a8 gc\u3002\u81ea\u52a8 gc \u7684\u597d\u5904: (1). \u6808\u53d8\u91cf\u4f7f\u7528 RAII \u7c7b void bad () { m . lock (); // \u8bf7\u6c42\u4e92\u65a5\u4f53 f (); // \u82e5 f() \u629b\u5f02\u5e38\uff0c\u4e92\u65a5\u4f53\u6c38\u4e0d\u91ca\u653e if (...) return ; // \u63d0\u524d\u8fd4\u56de\uff0c\u4e92\u65a5\u4f53\u6c38\u4e0d\u91ca\u653e m . unlock ; } \u5c06\u4e92\u65a5\u4f53\u5c01\u88c5\u5728 class \u4e2d\uff0c\u751f\u5b58\u671f\u7ed3\u675f\u540e\u81ea\u52a8\u91ca\u653e void good () { std :: lock_guard < std :: mutex > lock ( m ); f (); if (...) return ; } (2). \u6210\u5458\u53d8\u91cf\u4f7f\u7528 RAII \u7c7b class Obj { std :: lock_guard < std :: mutex > lock ( m ); ... }; \u5bf9\u8c61\u6790\u6784\u524d\u9006\u5e8f\u6267\u884c\u6210\u5458\u7684\u6790\u6784\uff0c\u5bf9\u8c61\u7684\u6811\u7ed3\u6784\u81ea\u52a8\u5730\u88ab\u6709\u6548\u6790\u6784","title":"(1). \u57fa\u672c\u5b9a\u4e49"},{"location":"_basis/_smart_pointers/ptr1/#2","text":"RAII \u548c ownership \u6302\u94a9\uff0c\u5e7f\u4e49\u7684\u8bf4\uff0c\u5bf9\u8c61 A \u8d1f\u8d23\u8d44\u6e90 B \u7684\u521b\u5efa\u548c\u91ca\u653e $\\Longrightarrow$ A owns B\u3002\u4ee5\u667a\u80fd\u6307\u9488\u4e3a\u4f8b: \u72ec\u5360\u6240\u6709\u6743\uff0c unique_ptr : ctor \u521d\u59cb\u5316\uff0cdtor \u91ca\u653e\uff0cmove-only \u5171\u4eab\u6240\u6709\u6743, shared_ptr : ctor \u548c dtor \u6839\u636e\u5f15\u7528\u8ba1\u6570\u7684\u60c5\u51b5\u6267\u884c\uff0c\u62f7\u8d1d\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u8d4b\u503c\u589e\u52a0\u4e00\u4e2a\u51cf\u5c11\u4e00\u4e2a\uff0c\u79fb\u52a8\u4e0d\u53d8 \u65e0\u6240\u6709\u6743\u8bed\u4e49\uff0c\u53ea\u662f\u7528\u88f8\u6307\u9488\u8bbf\u95ee\u8d44\u6e90: \u8bbf\u95ee\u65f6\u4fdd\u8bc1\u8d44\u6e90\u5b58\u5728\uff0c\u751f\u5b58\u671f\u7ed3\u675f\u540e\u4e5f\u4e0d\u9700\u8981\u5b83\u91ca\u653e\u8d44\u6e90","title":"(2). \u6240\u6709\u6743"},{"location":"_basis/_smart_pointers/ptr1/#2-unique_ptr","text":"","title":"2. unique_ptr"},{"location":"_basis/_smart_pointers/ptr1/#1_1","text":"op description unique_ptr<T> u unique_ptr<T, D> u \u7a7a unique_ptr unique_ptr<T> u(new T) \u6ce8\u610f\u4e0d\u80fd\u62f7\u8d1d\u521d\u59cb\u5316 u = nullptr \u91ca\u653e u \u6307\u5411\u7684\u5bf9\u8c61\uff0c\u5e76\u5c06 u \u7f6e\u4e3a\u7a7a u.release() u \u653e\u5f03\u63a7\u5236\u6743: \u8fd4\u56de\u6307\u9488\uff0c\u5e76\u7f6e\u4e3a\u7a7a u.reset() u.reset(q) u.reset(nullptr) \u91ca\u653e u \u6307\u5411\u7684\u5bf9\u8c61\uff0c\u5e76\u7f6e\u4e3a\u7a7a\uff0c\u5982\u679c\u7ed9\u4e86\u53c2\u6570\uff0c u \u6307\u5411\u7ed9\u5b9a\u5bf9\u8c61 u.get() \u8fd4\u56de u \u4e2d\u4fdd\u5b58\u7684\u6307\u9488\uff0c\u5e94\u5c0f\u5fc3\u4f7f\u7528 transfer ownership \u89c1\u4e0b \u7ed9\u7a7a unique_ptr \u8d4b\u503c u.reset(p)","title":"(1). \u57fa\u672c\u64cd\u4f5c"},{"location":"_basis/_smart_pointers/ptr1/#2_1","text":"transfer ownership unique_ptr \u5173\u952e\u7684\u64cd\u4f5c\u4e4b\u4e00\u662f\u8f6c\u79fb\u6307\u9488\u6240\u6709\u6743 (i.e. \u79fb\u52a8\u8bed\u4e49)\uff0c\u5b9e\u73b0\u65b9\u5f0f // 1 unique_ptr < string > p1 ( p2 . release ()); unique_ptr < string > p3 ( new string ( \"\" )); p3 . reset ( p4 . release ()); // 2 unique_ptr < string > p5 = std :: move ( p6 ); \u5bf9\u6bd4: \u65b9\u5f0f 1: \u53ef\u8bfb\u6027\u5dee\uff0c\u4e14\u4e0d\u4f1a\u79fb\u52a8 custom deleter \u65b9\u5f0f 2: \u5b8c\u7f8e factory method unique_ptr < SomeObj > create_obj (...) { return unique_ptr < SomeObj > ( new SomeObj (...)); } \u53ef\u4ee5\u8fd4\u56de unique_ptr \u7684\u539f\u56e0: \u6808\u4e0a\u5bf9\u8c61\u751f\u5b58\u671f\u7ed3\u675f\uff0cC++ \u7684 copy elision \u673a\u5236\u4f1a\u4f18\u5148\u5c1d\u8bd5\u79fb\u52a8\uff0c\u4e0d\u884c\u7684\u8bdd\u518d\u5c1d\u8bd5\u62f7\u8d1d","title":"(2). \u79fb\u52a8\u8bed\u4e49"},{"location":"_basis/_smart_pointers/ptr1/#3-vs-auto_ptr","text":"auto_ptr \u662f\u65e7 C++ \u5b9e\u73b0\u72ec\u5360\u6240\u6709\u6743\u7684\u667a\u80fd\u6307\u9488 auto_ptr \u9700\u8981\u80fd\u5b58\u5165\u5bb9\u5668\uff0c\u800c\u5bb9\u5668\u662f\u503c\u8bed\u4e49\u7684\uff0c auto_ptr \u628a\u8d4b\u503c\u5f53\u79fb\u52a8\u4f7f \u8d4b\u503c\u4f7f\u539f\u6307\u9488\u53d8\u4e3a null \uff0c\u5bfc\u81f4\u8ff7\u60d1\u884c\u4e3a\uff0c\u4f8b\u5982\u65e0\u6cd5\u6392\u5e8f // ToDo: an example of factory","title":"(3). vs auto_ptr"},{"location":"_basis/_smart_pointers/ptr1/#3-shared_ptr","text":"\u5f53\u67d0\u4e2a\u6307\u9488\u4e0d\u88ab\u67d0\u4e2a\u7279\u5b9a\u7684\u667a\u80fd\u6307\u9488\u5bf9\u8c61\u6240\u6709\uff0c\u5177\u6709\u300c\u5171\u4eab\u6240\u6709\u6743\u300d\u8bed\u4e49\uff0c\u5c31\u9002\u7528 shared_ptr \u3002\u5b83\u9700\u8981\u66f4\u5927\u7684\u5f00\u9500: \u521d\u59cb\u5316\u7b2c\u4e00\u4e2a shared_ptr \u65f6\uff0c\u540c\u65f6\u8fd8\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e2a object \u548c\u4e00\u4e2a\u63a7\u5236\u5757 (\u5305\u542b ref count\u3001weak count\u3001custom deleter, etc.) \u6bcf\u4e2a shared_ptr \u9700\u8981\u5305\u542b\u5bf9\u539f\u5bf9\u8c61\u7684\u5f15\u7528\u548c\u5bf9\u63a7\u5236\u5757\u7684\u5f15\u7528\uff0c\u7ea6\u4e3a\u88f8\u6307\u9488\u7684 2 \u500d\u7a7a\u95f4 \u9012\u589e\u9012\u51cf\u5f15\u7528\u662f\u539f\u5b50\u6027\u7684\uff0c\u6bd4\u975e\u539f\u5b50\u64cd\u4f5c\u6162 shared_ptr \u7528\u4ee5\u4e0a\u4ee3\u4ef7\u6362\u53d6\u81ea\u52a8\u5783\u573e\u56de\u6536\u3002 \u5bf9\u6bd4 shared_ptr \u548c unique_ptr \u4e8c\u8005\u9664\u672c\u8d28\u533a\u522b\u5916\uff0c\u4f7f\u7528\u4e0a\u7684\u533a\u522b: shared_ptr \u4e5f\u652f\u6301\u81ea\u5b9a\u4e49\u5220\u9664\u5668\uff0c\u4f46\u4e0d\u5185\u5d4c\u5728\u7c7b\u578b\u4fe1\u606f\u4e2d shared_ptr \u4e0d\u652f\u6301\u6570\u7ec4 shared_ptr \u652f\u6301\u7684\u64cd\u4f5c op description shared_ptr<T> sp; \u503c\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u7a7a\u6307\u9488 p , *p , p->mem \u53ef\u4ee5\u50cf\u666e\u901a\u6307\u9488\u4e00\u6837\u4f7f\u7528\u667a\u80fd\u6307\u9488\u7684\u53d8\u91cf\u540d make_shared<T>(args) \u4ee5 emplace \u7684\u65b9\u5f0f\u521d\u59cb\u5316 shared_ptr<T> p(q); \u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u9012\u589e q \u4e2d\u7684\u8ba1\u6570\u5668 p = q \u8d4b\u503c\uff0c\u9012\u51cf p \u7684\u8ba1\u6570\uff0c\u9012\u589e q \u7684\u8ba1\u6570 swap(p, q) / p.swap(q) \u4ea4\u6362 p \u548c q \u7684\u6307\u9488 p.get() \u8fd4\u56de p \u4e2d\u4fdd\u5b58\u7684\u539f\u59cb\u7c7b\u578b\u6307\u9488\uff0c\u5e94\u5c0f\u5fc3\u4f7f\u7528 p.use_count() \u8fd4\u56de p \u7684\u8ba1\u6570\uff0c\u53ef\u80fd\u5f88\u6162\uff0c\u4e3b\u8981\u7528\u4e8e\u8c03\u8bd5","title":"3. shared_ptr"},{"location":"_basis/_smart_pointers/ptr1/#1_2","text":"shared_ptr \u6709\u4e24\u79cd\u521d\u59cb\u5316\u65b9\u5f0f: \u901a\u8fc7 make_shared \u4ee5 emplace \u7684\u65b9\u5f0f \u76f4\u63a5\u521d\u59cb\u5316\uff0c\u901a\u8fc7\u539f\u59cb\u6307\u9488\u53d8\u91cf (\u6216 unique_ptr ) \u9996\u5148\u5e94\u907f\u514d\u4ece\u539f\u59cb\u6307\u9488\u4e0a\u521b\u5efa shared_ptr \uff0c\u975e\u6b64\u4e0d\u53ef\u4e5f\u8981\u4f7f\u7528\u4e34\u65f6\u5bf9\u8c61 example void process ( shared_ptr < int > ptr ) { } ... int * x ( new int ( 1024 )); process ( shared_ptr < int > ( x )); int j = * x ; cout << j << endl ; \u7531\u4e8e\u6df7\u7528\u4e86\u539f\u59cb\u6307\u9488\u548c shared_ptr \uff0c\u5bfc\u81f4\u4e86 undefined enabled_shared_from_this // \u7528\u4e8e\u8ddf\u8e2a\u5df2\u7ecf\u5904\u7406\u8fc7\u7684 Widget \u7684\u6570\u636e\u7ed3\u6784: std :: vector < std :: shared_ptr < Widget >> processedWidgets ; // Widget \u7c7b class Widget { public : void process () { ... processedWidgets . emplace_back ( this ); // \u9519\u8bef: \u76f8\u5f53\u4e8e\u65b0\u5f00\u4e86\u4e00\u4e2a shared_ptr } }; \u9700\u6c42: \u5728\u7c7b\u5185\u62ff\u5230\u4e00\u4e2a this \u7684 shared_ptr \uff0c\u4e14\u8fd9\u4e2a shared_ptr \u4e0d\u662f\u7b2c\u4e00\u4e2a class Widget : public std :: enable_shared_from_this < Widget > { public : void process () { ... processedWidgets . emplace_back ( shared_from_this ()); } }; \u800c\u5bf9\u6bd4\u300c\u4f7f\u7528 make_shared \u521d\u59cb\u5316\u300d\u548c\u300c\u4f7f\u7528 new \u7684\u4e34\u65f6\u5bf9\u8c61\u76f4\u63a5\u521d\u59cb\u5316\u300d\u4e5f\u662f\u524d\u8005\u66f4\u597d\uff0c\u539f\u56e0\u5728\u4e8e: 1 . \u4f7f\u7528 make_shared \u53ef\u4ee5\u5c11\u6253\u4e00\u6b21\u7c7b\u578b\uff0c\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 auto spw1 ( std :: make_shared < Widget > ()); //\u4f7f\u7528make\u51fd\u6570 std :: shared_ptr < Widget > spw2 ( new Widget ); //\u4e0d\u4f7f\u7528make\u51fd\u6570 2 . \u4f7f\u7528 make_shared \u66f4\u52a0\u5f02\u5e38\u5b89\u5168 processWidget ( std :: shared_ptr < Widget > ( new Widget ), computePriority ()); \u51fd\u6570\u4f20\u53c2\u524d\u5fc5\u987b\u5148\u8ba1\u7b97\u5b9e\u53c2\uff0c\u800c\u7f16\u8bd1\u5668\u5728\u8f6c\u6362\u76ee\u6807\u4ee3\u7801\u65f6\u4e0d\u5fc5\u6309\u7167\u987a\u5e8f\uff0c\u53ef\u80fd\u4ea7\u751f new Widget > computePriority > shared_ptr ctor \u7684\u987a\u5e8f\uff0c computePriority \u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5bfc\u81f4 new Widget \u6cc4\u6f0f 3 . \u4f7f\u7528 make_shared \u5185\u5b58\u5206\u914d\u66f4\u5c11 std::shared_ptr<Widget> spw(new Widget); new \u5bf9\u8c61\u4e00\u6b21\u5206\u914d\uff0c\u63a7\u5236\u5757\u53c8\u4e00\u6b21\u5206\u914d auto spw = std::make_shared<Widget>(); \u5206\u914d\u4e00\u5757\u5185\u5b58\uff0c\u540c\u65f6\u5bb9\u7eb3\u5bf9\u8c61\u548c\u63a7\u5236\u5757 \u9700\u8981\u8003\u8651\u4e00\u4e9b\u53ea\u80fd\u7528\u76f4\u63a5\u521d\u59cb\u5316\u7684\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u81ea\u5b9a\u4e49\u5220\u9664\u5668\u6216\u82b1\u62ec\u53f7\u521d\u59cb\u5316 ...","title":"(1). \u521d\u59cb\u5316"},{"location":"_basis/_smart_pointers/ptr1/#4-weak_ptr","text":"weak_ptr \u652f\u6301\u7684\u64cd\u4f5c op description weak_ptr<T> wp(sp); \u548c shared_ptr \u6307\u5411\u76f8\u540c\u5bf9\u8c61 wp = p p \u53ef\u4ee5\u662f shared_ptr \u6216 weak_ptr wp.reset() \u5c06 wp \u7f6e\u4e3a\u7a7a wp.use_count() \u5171\u4eab\u7684 shared_ptr \u6570\u91cf wp.expired() \u662f\u5426\u8fc7\u671f\uff0c\u5373 use_count == 1 wp.lock() \u82e5 expired \u4e3a true\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684 shared_ptr \uff0c \u5426\u5219\u8fd4\u56de\u6307\u5411 wp \u7684\u8d44\u6e90\u5bf9\u8c61\u7684 shared_ptr shared_ptr<T> sp(wp) \u82e5 wp \u60ac\u7a7a\uff0c\u4f1a\u629b\u51fa std::bad_weak_ptr \u5f02\u5e38 weak_ptr \u7684\u7279\u6027: \u548c shared_ptr \u914d\u5957\u4f7f\u7528\uff0c\u4e14\u4e0d\u589e\u52a0\u5f15\u7528\u8ba1\u6570 \u5728\u60ac\u7a7a (dangle) \u65f6\u53ef\u4ee5\u77e5\u6653 ( wp.expired() ) weak_ptr \u9700\u8981\u4e00\u4e2a\u64cd\u4f5c: \u5f53 weak_ptr \u8fc7\u671f\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6307\u9488\uff1b\u5426\u5219\u8fd4\u56de\u5f15\u7528\u7684\u8d44\u6e90 (\u7684 share_ptr ) \u82e5\u6309 if !expired then \u89e3\u5f15\u7528 \u5b9e\u73b0\u4f1a\u9020\u6210\u7ade\u6001\u6761\u4ef6 ( weak_ptr \u4e0d\u652f\u6301\u89e3\u5f15\u7528)\uff0c\u56e0\u6b64\u7531 lock() \u5b9e\u73b0 weak_ptr \u7684\u4ee3\u4ef7\u4e0e shared_ptr \u76f8\u5f53\uff0c\u9700\u8981\u5bf9\u63a7\u5236\u5757\u7684\u5f15\u7528\uff0c\u5bf9 weak count \u7684\u52a0\u51cf\u6d89\u53ca\u539f\u5b50\u64cd\u4f5c\u3002 \u4e3a\u4ec0\u4e48\u9700\u8981 weak count weak_ptr \u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5224\u65ad\u662f\u5426\u8fc7\u671f\uff0c\u56e0\u6b64 shared_ptr \u7684\u6790\u6784\u903b\u8f91\u4e3a: \u5f53 ref_count=0 \uff0c\u6790\u6784\u8d44\u6e90\uff0c\u6b64\u65f6 wp \u5df2\u7ecf\u65e0\u6cd5\u8f6c\u6362\u4e3a sp \uff0c\u7136\u540e\u5f53 weak_count \u4e5f\u4e3a 0\uff0c\u518d\u6790\u6784\u63a7\u5236\u5757 weak_ptr \u6f5c\u5728\u7684\u4f7f\u7528\u573a\u666f\u5305\u62ec \u7f13\u5b58\u3001\u89c2\u5bdf\u8005\u5217\u8868\u3001\u6253\u7834 shared_ptr \u7684\u73af\u72b6\u7ed3\u6784","title":"4. weak_ptr"},{"location":"_basis/_smart_pointers/ptr1/#1_3","text":"\u8003\u8651\u4e00\u4e2a naive \u7684\u5de5\u5382\u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a\u53ea\u8bfb\u5bf9\u8c61\u7684\u667a\u80fd\u6307\u9488 std :: unique_ptr < const Widget > loadWidget ( WidgetID id ); \u573a\u666f: loadWidget \u662f\u4e00\u4e2a\u6602\u8d35\u7684\u64cd\u4f5c (\u9700\u8981\u64cd\u4f5c\u6587\u4ef6\u6216\u6570\u636e\u5e93 I/O)\uff0c\u4e14\u4f7f\u7528\u91cd\u590d\u7684 id \u5f88\u5e38\u89c1 \u5f15\u5165\u7f13\u5b58\uff0c\u5219 cache \u548c\u8c03\u7528\u8005\u90fd\u9700\u8981 Widget \u7684\u6307\u9488\uff0c\u4e0d\u80fd\u7528 unique_ptr \u8c03\u7528\u8005\u51b3\u5b9a Widget \u7684\u751f\u5b58\u671f\uff1a\u5f53\u6ca1\u6709 caller \u4f7f\u7528 Widget \u540e\uff0c Widget \u5e94\u8be5\u88ab\u9500\u6bc1 \u4f7f\u7528 shared_ptr \u7531\u4e8e cache \u5fc5\u987b\u4fdd\u5b58\u4e00\u4efd\uff0c\u65e0\u6cd5\u5b9e\u73b0\u6ca1\u6709 caller \u4f7f\u7528\u5c31\u88ab\u9500\u6bc1 cache \u7684\u6307\u9488\u9700\u8981\u5224\u65ad\uff0c\u5982\u679c\u7f13\u5b58\u7684\u8d44\u6e90\u5df2\u7ecf\u7a7a\u60ac\u5c31\u91cd\u65b0\u7f13\u5b58 \u88f8\u6307\u9488\u505a\u4e0d\u5230 a quick-and-dirty implementation std :: shared_ptr < const Widget > fastLoadWidget ( WidgetID id ) { static std :: unordered_map < WidgetID , std :: weak_ptr < const Widget >> cache ; auto objPtr = cache [ id ]. lock (); if ( ! objPtr ) { objPtr = loadWidget ( id ); // unique_ptr -> shared_ptr cache [ id ] = objPtr ; // shared_ptr -> weak_ptr } return objPtr ; }","title":"(1). \u7f13\u5b58"},{"location":"_basis/_smart_pointers/ptr1/#2-observer-design-pattern","text":"subject \u548c observers \u5b58\u5728\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u4e00\u65e6 subject \u505a\u51fa\u6539\u53d8\uff0c\u4f9d\u8d56\u5b83\u7684 observers \u9700\u8981\u6539\u53d8\u72b6\u6001\uff0c\u56e0\u6b64 subject \u901a\u5e38\u7ef4\u62a4\u4e00\u4e2a observerList \u3002 \u5c3d\u7ba1 observers \u662f subject \u7684\u6210\u5458\uff0c\u8fd9\u662f\u4e00\u4e2a\u5178\u578b\u7684 \u300c\u65e0\u6240\u6709\u6743\u300d\u7684\u4f8b\u5b50\uff0c\u89c2\u5bdf\u8005\u548c\u4e3b\u9898\u4e4b\u95f4\u5404\u6709\u5404\u7684 lifespan subject \u4ec5\u9700\u8981\u77e5\u9053\u4fdd\u5b58\u7684 observer \u662f\u5426\u5df2\u7ecf\u60ac\u7a7a\uff0c\u56e0\u6b64\u6b64\u5904\u9002\u7528 weak_ptr","title":"(2). Observer Design Pattern"},{"location":"_basis/_smart_pointers/ptr1/#3-shared_ptr_1","text":"\u5047\u8bbe A \u548c C \u5171\u4eab B \u7684\u6240\u6709\u6743\uff1b\u4e14 B \u6307\u5411 A \u7684\u6307\u9488\u4e5f\u5f88\u6709\u7528\uff0c\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u6307\u9488: \u539f\u59cb\u6307\u9488: \u2002 \u82e5 A \u5148\u88ab\u9500\u6bc1\uff0c C \u7ee7\u7eed\u6307\u5411 B \uff0c\u4e14 B \u65e0\u6cd5\u5224\u5b9a\u6307\u9488\u662f\u5426\u60ac\u7a7a shared_ptr : \u2002 \u9020\u6210\u5faa\u73af\u5f15\u7528\uff0c C \u88ab\u9500\u6bc1\u540e\uff0c A \u548c B \u90fd\u88ab\u6cc4\u9732 weak_ptr : \u2002 \u4e0d\u4f1a\u9020\u6210\u5faa\u73af\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5224\u5b9a\u60ac\u7a7a \u4f7f\u7528 weak_ptr \u6253\u7834 shared_ptr \u7684\u5faa\u73af\u4e5f\u5e76\u4e0d\u5e38\u7528\u3002\u4ee5\u4e25\u683c\u5206\u5c42\u7684\u6570\u636e\u7ed3\u6784\u4e3a\u4f8b\uff0c\u5b50\u7ed3\u70b9\u53ea\u88ab\u7236\u7ed3\u70b9\u6301\u6709\uff0c\u7236\u5bf9\u5b50\u7684\u5f15\u7528\u53ef\u7528 unique_ptr \u5b9e\u73b0\uff0c\u800c\u7531\u4e8e\u5b50\u7684\u751f\u5b58\u671f\u4e00\u5b9a\u77ed\u4e8e\u7236\u7ed3\u70b9\uff0c\u5b50\u7ed3\u70b9\u4e0d\u53ef\u80fd\u89e3\u5f15\u7528\u60ac\u6302\u7684\u7236\u6307\u9488\uff0c\u56e0\u6b64\u53ef\u7528\u539f\u59cb\u6307\u9488\u5b9e\u73b0\u3002","title":"(3). shared_ptr \u7684\u5faa\u73af\u5f15\u7528"}]}